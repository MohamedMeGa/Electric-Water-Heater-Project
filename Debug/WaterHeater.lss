
WaterHeater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002440  000024d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800072  00800072  000024e6  2**0
                  ALLOC
  3 .stab         00002208  00000000  00000000  000024e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000104c  00000000  00000000  000046f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000573c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000587c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000059ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007635  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000092d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000096bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009e8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__vector_1>
       8:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__vector_2>
       c:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__vector_10>
      2c:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 b4 06 	jmp	0xd68	; 0xd68 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <main>
      8a:	0c 94 1e 12 	jmp	0x243c	; 0x243c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_VoidInitialization>:
/* Description :  function for initialization The ADC		*/
/*				  input	 :	void							*/
/*				  output :	void							*/
/************************************************************/	  
void	ADC_VoidInitialization(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
/**					Disable ADC								**/
	CLEAR_BIT(ADCSRA, 7);
     b4e:	a6 e2       	ldi	r26, 0x26	; 38
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e6 e2       	ldi	r30, 0x26	; 38
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	
/**				Do not Start Conversion						**/
	CLEAR_BIT(ADCSRA, 6);
     b5c:	a6 e2       	ldi	r26, 0x26	; 38
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e6 e2       	ldi	r30, 0x26	; 38
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 7b       	andi	r24, 0xBF	; 191
     b68:	8c 93       	st	X, r24
	
/**				Auto Trigger disable						**/
	CLEAR_BIT(ADCSRA, 5);
     b6a:	a6 e2       	ldi	r26, 0x26	; 38
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e6 e2       	ldi	r30, 0x26	; 38
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24

/**				Interrupt flag CLEARED						**/
	SET_BIT(ADCSRA, 4);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 61       	ori	r24, 0x10	; 16
     b84:	8c 93       	st	X, r24
	
/**				Deactive ADC Interrupt						**/
	CLEAR_BIT(ADCSRA, 3);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	8c 93       	st	X, r24
	
/**			Register Adjustment Options		   	   */
	#if	REG_ADJ == Left_Adgustment
		SET_BIT(ADMUX,5);
     b94:	a7 e2       	ldi	r26, 0x27	; 39
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e7 e2       	ldi	r30, 0x27	; 39
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 62       	ori	r24, 0x20	; 32
     ba0:	8c 93       	st	X, r24
/**			Reference Selections Options		   */
	#if	REF_SELECT == AREF
		CLEAR_BIT(ADMUX,6);
		CLEAR_BIT(ADMUX,7);
	#elif	REF_SELECT == AVCC
		SET_BIT(ADMUX,6);
     ba2:	a7 e2       	ldi	r26, 0x27	; 39
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e7 e2       	ldi	r30, 0x27	; 39
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 64       	ori	r24, 0x40	; 64
     bae:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,7);
     bb0:	a7 e2       	ldi	r26, 0x27	; 39
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e7 e2       	ldi	r30, 0x27	; 39
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 77       	andi	r24, 0x7F	; 127
     bbc:	8c 93       	st	X, r24
	#endif


	
/**			Channels selection Options		   	   */
	CLEAR_BIT(ADMUX, 4);
     bbe:	a7 e2       	ldi	r26, 0x27	; 39
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e7 e2       	ldi	r30, 0x27	; 39
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 7e       	andi	r24, 0xEF	; 239
     bca:	8c 93       	st	X, r24
	CLEAR_BIT(ADMUX, 3);
     bcc:	a7 e2       	ldi	r26, 0x27	; 39
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e7 e2       	ldi	r30, 0x27	; 39
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	87 7f       	andi	r24, 0xF7	; 247
     bd8:	8c 93       	st	X, r24
	
	#if		ADC_CHANNEL	== ADC0
		CLEAR_BIT(ADMUX, 2);
     bda:	a7 e2       	ldi	r26, 0x27	; 39
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e7 e2       	ldi	r30, 0x27	; 39
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8b 7f       	andi	r24, 0xFB	; 251
     be6:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX, 1);
     be8:	a7 e2       	ldi	r26, 0x27	; 39
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e7 e2       	ldi	r30, 0x27	; 39
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8d 7f       	andi	r24, 0xFD	; 253
     bf4:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX, 0);
     bf6:	a7 e2       	ldi	r26, 0x27	; 39
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e7 e2       	ldi	r30, 0x27	; 39
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8e 7f       	andi	r24, 0xFE	; 254
     c02:	8c 93       	st	X, r24
	#elif	PRESCALE	== PRES_32_DIV
		SET_BIT(ADCSRA, 2);
		CLEAR_BIT(ADCSRA, 1);
		SET_BIT(ADCSRA, 0);
	#elif	PRESCALE	== PRES_64_DIV
		SET_BIT(ADCSRA, 2);
     c04:	a6 e2       	ldi	r26, 0x26	; 38
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e6 e2       	ldi	r30, 0x26	; 38
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	84 60       	ori	r24, 0x04	; 4
     c10:	8c 93       	st	X, r24
		SET_BIT(ADCSRA, 1);
     c12:	a6 e2       	ldi	r26, 0x26	; 38
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	e6 e2       	ldi	r30, 0x26	; 38
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	82 60       	ori	r24, 0x02	; 2
     c1e:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA, 0);
     c20:	a6 e2       	ldi	r26, 0x26	; 38
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	e6 e2       	ldi	r30, 0x26	; 38
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	8e 7f       	andi	r24, 0xFE	; 254
     c2c:	8c 93       	st	X, r24
		SET_BIT(ADCSRA, 1);
		SET_BIT(ADCSRA, 0);
	#endif
	

}
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <ADC_VoidADCEnable>:
/************************************************************/
/* Pre_condition  :  this function must be used after  		*/
/*     				 ADC Initializtion	 					*/
/************************************************************/
void	ADC_VoidADCEnable(void)
{
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(ADCSRA, 7);
     c3c:	a6 e2       	ldi	r26, 0x26	; 38
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e6 e2       	ldi	r30, 0x26	; 38
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	80 68       	ori	r24, 0x80	; 128
     c48:	8c 93       	st	X, r24
	
}
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <ADC_U16ReadADC>:
/************************************************************/
/* Pre_condition  :  this function must be used after  		*/
/*     				 Start conversion	 					*/
/************************************************************/
u16		ADC_U16ReadADC(void)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	00 d0       	rcall	.+0      	; 0xc56 <ADC_U16ReadADC+0x6>
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
	u16	Local_ADCReturn = 0;
     c5a:	1a 82       	std	Y+2, r1	; 0x02
     c5c:	19 82       	std	Y+1, r1	; 0x01
	
	/**		Start Conversion								*/
	ADC_VoidStartConverstion();
     c5e:	0e 94 6d 06 	call	0xcda	; 0xcda <ADC_VoidStartConverstion>
	
	while(GET_BIT(ADCSRA, 4) == 0);
     c62:	e6 e2       	ldi	r30, 0x26	; 38
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	80 81       	ld	r24, Z
     c68:	82 95       	swap	r24
     c6a:	8f 70       	andi	r24, 0x0F	; 15
     c6c:	88 2f       	mov	r24, r24
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	81 70       	andi	r24, 0x01	; 1
     c72:	90 70       	andi	r25, 0x00	; 0
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	a9 f3       	breq	.-22     	; 0xc62 <ADC_U16ReadADC+0x12>
	SET_BIT(ADCSRA, 4);
     c78:	a6 e2       	ldi	r26, 0x26	; 38
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e6 e2       	ldi	r30, 0x26	; 38
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	80 61       	ori	r24, 0x10	; 16
     c84:	8c 93       	st	X, r24

	#if		REG_ADJ == Left_Adgustment
		Local_ADCReturn	=  ADCH ;
     c86:	e5 e2       	ldi	r30, 0x25	; 37
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	9a 83       	std	Y+2, r25	; 0x02
     c92:	89 83       	std	Y+1, r24	; 0x01
		
	#elif	REG_ADJ == Right_Adgustment
		Local_ADCReturn	=  ADCH ## ADCL;
	#endif
	
	return	Local_ADCReturn;
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	cf 91       	pop	r28
     c9e:	df 91       	pop	r29
     ca0:	08 95       	ret

00000ca2 <ADC_VoidADCDisable>:
/************************************************************/
/* Pre_condition  :  this function must be used after  		*/
/*     				 ADC Initializtion	 					*/
/************************************************************/
void	ADC_VoidADCDisable(void)
{
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
	
	CLEAR_BIT(ADCSRA, 7);
     caa:	a6 e2       	ldi	r26, 0x26	; 38
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e6 e2       	ldi	r30, 0x26	; 38
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	8f 77       	andi	r24, 0x7F	; 127
     cb6:	8c 93       	st	X, r24
	
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <ADC_VoidInterruptEnable>:
/************************************************************/
/* Pre_condition  :  this function must be used after  		*/
/*     				 ADC Initializtion	 					*/
/************************************************************/
void	ADC_VoidInterruptEnable(void)
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(ADCSRA, 3);
     cc6:	a6 e2       	ldi	r26, 0x26	; 38
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e6 e2       	ldi	r30, 0x26	; 38
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	88 60       	ori	r24, 0x08	; 8
     cd2:	8c 93       	st	X, r24
	
}
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <ADC_VoidStartConverstion>:
/************************************************************/
/* Pre_condition  :  this function must be used after  		*/
/*     				 ADC Enable			 					*/
/************************************************************/
void	ADC_VoidStartConverstion(void)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA, 6);
     ce2:	a6 e2       	ldi	r26, 0x26	; 38
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e6 e2       	ldi	r30, 0x26	; 38
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	80 64       	ori	r24, 0x40	; 64
     cee:	8c 93       	st	X, r24
}
     cf0:	cf 91       	pop	r28
     cf2:	df 91       	pop	r29
     cf4:	08 95       	ret

00000cf6 <ADC_VoidAutoTrigger>:
/* Pre_condition  :  this function must be used after  		*/
/*     				 Interrupt initialized 					*/
/************************************************************/

void	ADC_VoidAutoTrigger(void)
{
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
/**				Auto Trigger disable						**/
	SET_BIT(ADCSRA, 5);
     cfe:	a6 e2       	ldi	r26, 0x26	; 38
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e6 e2       	ldi	r30, 0x26	; 38
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	80 62       	ori	r24, 0x20	; 32
     d0a:	8c 93       	st	X, r24
	
/**				Auto Triggeer Options				   		**/
	#if		TRIGGER_SELECT	== Free_Running
		CLEAR_BIT(SFIOR, 7);
     d0c:	a0 e5       	ldi	r26, 0x50	; 80
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e0 e5       	ldi	r30, 0x50	; 80
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	8f 77       	andi	r24, 0x7F	; 127
     d18:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR, 6);
     d1a:	a0 e5       	ldi	r26, 0x50	; 80
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e0 e5       	ldi	r30, 0x50	; 80
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8f 7b       	andi	r24, 0xBF	; 191
     d26:	8c 93       	st	X, r24
		CLEAR_BIT(SFIOR, 5);
     d28:	a0 e5       	ldi	r26, 0x50	; 80
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e0 e5       	ldi	r30, 0x50	; 80
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8f 7d       	andi	r24, 0xDF	; 223
     d34:	8c 93       	st	X, r24
	#elif	TRIGGER_SELECT	== Count1_Capt_Event
		SET_BIT(SFIOR, 7);
		SET_BIT(SFIOR, 6);
		SET_BIT(SFIOR, 5);
	#endif
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <ADC_VoidSetADCCallback>:

void	ADC_VoidSetADCCallback(pf	copy_FunctionAdress)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	00 d0       	rcall	.+0      	; 0xd42 <ADC_VoidSetADCCallback+0x6>
     d42:	cd b7       	in	r28, 0x3d	; 61
     d44:	de b7       	in	r29, 0x3e	; 62
     d46:	9a 83       	std	Y+2, r25	; 0x02
     d48:	89 83       	std	Y+1, r24	; 0x01
	if(copy_FunctionAdress	!=	NULL)
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	31 f0       	breq	.+12     	; 0xd5e <ADC_VoidSetADCCallback+0x22>
	{
		x	=	copy_FunctionAdress;
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	90 93 75 00 	sts	0x0075, r25
     d5a:	80 93 74 00 	sts	0x0074, r24
	}
}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <__vector_20>:

//vector 17
void	__vector_20(void)	__attribute__(( signal , used ));

void	__vector_20(void)
{
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	2f 93       	push	r18
     d74:	3f 93       	push	r19
     d76:	4f 93       	push	r20
     d78:	5f 93       	push	r21
     d7a:	6f 93       	push	r22
     d7c:	7f 93       	push	r23
     d7e:	8f 93       	push	r24
     d80:	9f 93       	push	r25
     d82:	af 93       	push	r26
     d84:	bf 93       	push	r27
     d86:	ef 93       	push	r30
     d88:	ff 93       	push	r31
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
	x();
     d92:	e0 91 74 00 	lds	r30, 0x0074
     d96:	f0 91 75 00 	lds	r31, 0x0075
     d9a:	09 95       	icall
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <DIO_VoidInitialization>:
/* 	Description :  function for initialization and define	*/
/*				   the direction of ports					*/
/************************************************************/

void	DIO_VoidInitialization(void)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
	DDRA = DIO_u8_PORTA_DIRECTIONS;
     dca:	ea e3       	ldi	r30, 0x3A	; 58
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	8e ef       	ldi	r24, 0xFE	; 254
     dd0:	80 83       	st	Z, r24
	DDRB = DIO_u8_PORTB_DIRECTIONS;
     dd2:	e7 e3       	ldi	r30, 0x37	; 55
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	82 e6       	ldi	r24, 0x62	; 98
     dd8:	80 83       	st	Z, r24
	DDRC = DIO_u8_PORTC_DIRECTIONS;
     dda:	e4 e3       	ldi	r30, 0x34	; 52
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	8f ef       	ldi	r24, 0xFF	; 255
     de0:	80 83       	st	Z, r24
	DDRD = DIO_u8_PORTD_DIRECTIONS;
     de2:	e1 e3       	ldi	r30, 0x31	; 49
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	10 82       	st	Z, r1
}
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <DIO_voidSetPinValue>:
/* Description :  function to set the value of any 			*/
/*				  pin to LOW or HIGH						*/
/************************************************************/

void	DIO_voidSetPinValue(u8	copy_u8PinNum, u8	copy_u8PinValue)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <DIO_voidSetPinValue+0x6>
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	89 83       	std	Y+1, r24	; 0x01
     dfa:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8PinNum >= DIO_U8_PORTA_START && copy_u8PinNum <= DIO_U8_PORTA_END)
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	88 30       	cpi	r24, 0x08	; 8
     e00:	60 f5       	brcc	.+88     	; 0xe5a <DIO_voidSetPinValue+0x6c>
	{
		if(copy_u8PinValue == DIO_HIGH)
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	a1 f4       	brne	.+40     	; 0xe30 <DIO_voidSetPinValue+0x42>
		{
			SET_BIT(PORTA, copy_u8PinNum);
     e08:	ab e3       	ldi	r26, 0x3B	; 59
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	eb e3       	ldi	r30, 0x3B	; 59
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_voidSetPinValue+0x38>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_voidSetPinValue+0x34>
     e2a:	84 2b       	or	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	b3 c0       	rjmp	.+358    	; 0xf96 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLEAR_BIT(PORTA, copy_u8PinNum);
     e30:	ab e3       	ldi	r26, 0x3B	; 59
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	eb e3       	ldi	r30, 0x3B	; 59
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <DIO_voidSetPinValue+0x60>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <DIO_voidSetPinValue+0x5c>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	9e c0       	rjmp	.+316    	; 0xf96 <DIO_voidSetPinValue+0x1a8>
		}
	}
	else if(copy_u8PinNum >= DIO_U8_PORTB_START && copy_u8PinNum <= DIO_U8_PORTB_END)
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	88 30       	cpi	r24, 0x08	; 8
     e5e:	90 f1       	brcs	.+100    	; 0xec4 <DIO_voidSetPinValue+0xd6>
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	80 31       	cpi	r24, 0x10	; 16
     e64:	78 f5       	brcc	.+94     	; 0xec4 <DIO_voidSetPinValue+0xd6>
	{
		copy_u8PinNum = copy_u8PinNum - DIO_U8_PORTA_SIZE;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	88 50       	subi	r24, 0x08	; 8
     e6a:	89 83       	std	Y+1, r24	; 0x01
		if(copy_u8PinValue == DIO_HIGH)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	a1 f4       	brne	.+40     	; 0xe9a <DIO_voidSetPinValue+0xac>
		{
			SET_BIT(PORTB, copy_u8PinNum);
     e72:	a8 e3       	ldi	r26, 0x38	; 56
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e8 e3       	ldi	r30, 0x38	; 56
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	02 2e       	mov	r0, r18
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <DIO_voidSetPinValue+0xa2>
     e8c:	88 0f       	add	r24, r24
     e8e:	99 1f       	adc	r25, r25
     e90:	0a 94       	dec	r0
     e92:	e2 f7       	brpl	.-8      	; 0xe8c <DIO_voidSetPinValue+0x9e>
     e94:	84 2b       	or	r24, r20
     e96:	8c 93       	st	X, r24
     e98:	7e c0       	rjmp	.+252    	; 0xf96 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLEAR_BIT(PORTB, copy_u8PinNum);
     e9a:	a8 e3       	ldi	r26, 0x38	; 56
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e8 e3       	ldi	r30, 0x38	; 56
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <DIO_voidSetPinValue+0xca>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <DIO_voidSetPinValue+0xc6>
     ebc:	80 95       	com	r24
     ebe:	84 23       	and	r24, r20
     ec0:	8c 93       	st	X, r24
     ec2:	69 c0       	rjmp	.+210    	; 0xf96 <DIO_voidSetPinValue+0x1a8>
		}
	}
	
	else if(copy_u8PinNum >= DIO_U8_PORTC_START && copy_u8PinNum <= DIO_U8_PORTC_END)
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	80 31       	cpi	r24, 0x10	; 16
     ec8:	90 f1       	brcs	.+100    	; 0xf2e <DIO_voidSetPinValue+0x140>
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	88 31       	cpi	r24, 0x18	; 24
     ece:	78 f5       	brcc	.+94     	; 0xf2e <DIO_voidSetPinValue+0x140>
	{
		copy_u8PinNum = copy_u8PinNum - (DIO_U8_PORTA_SIZE + DIO_U8_PORTB_SIZE);
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	80 51       	subi	r24, 0x10	; 16
     ed4:	89 83       	std	Y+1, r24	; 0x01
		
		if(copy_u8PinValue == DIO_HIGH)
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	a1 f4       	brne	.+40     	; 0xf04 <DIO_voidSetPinValue+0x116>
		{
			SET_BIT(PORTC, copy_u8PinNum);
     edc:	a5 e3       	ldi	r26, 0x35	; 53
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e5 e3       	ldi	r30, 0x35	; 53
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_voidSetPinValue+0x10c>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_voidSetPinValue+0x108>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	49 c0       	rjmp	.+146    	; 0xf96 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLEAR_BIT(PORTC, copy_u8PinNum);
     f04:	a5 e3       	ldi	r26, 0x35	; 53
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e5 e3       	ldi	r30, 0x35	; 53
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_voidSetPinValue+0x134>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_voidSetPinValue+0x130>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	34 c0       	rjmp	.+104    	; 0xf96 <DIO_voidSetPinValue+0x1a8>
		}
	}
	
	else if(copy_u8PinNum >= DIO_U8_PORTD_START && copy_u8PinNum <= DIO_U8_PORTD_END)
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	88 31       	cpi	r24, 0x18	; 24
     f32:	88 f1       	brcs	.+98     	; 0xf96 <DIO_voidSetPinValue+0x1a8>
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	80 32       	cpi	r24, 0x20	; 32
     f38:	70 f5       	brcc	.+92     	; 0xf96 <DIO_voidSetPinValue+0x1a8>
	{
		copy_u8PinNum = copy_u8PinNum - (DIO_U8_PORTA_SIZE + DIO_U8_PORTB_SIZE + DIO_U8_PORTC_SIZE);
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	88 51       	subi	r24, 0x18	; 24
     f3e:	89 83       	std	Y+1, r24	; 0x01
		
		if(copy_u8PinValue == DIO_HIGH)
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	81 30       	cpi	r24, 0x01	; 1
     f44:	a1 f4       	brne	.+40     	; 0xf6e <DIO_voidSetPinValue+0x180>
		{
			SET_BIT(PORTD, copy_u8PinNum);
     f46:	a2 e3       	ldi	r26, 0x32	; 50
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e2 e3       	ldi	r30, 0x32	; 50
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_voidSetPinValue+0x176>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_voidSetPinValue+0x172>
     f68:	84 2b       	or	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	14 c0       	rjmp	.+40     	; 0xf96 <DIO_voidSetPinValue+0x1a8>
		}
		else
		{
			CLEAR_BIT(PORTD, copy_u8PinNum);
     f6e:	a2 e3       	ldi	r26, 0x32	; 50
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e2 e3       	ldi	r30, 0x32	; 50
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <DIO_voidSetPinValue+0x19e>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <DIO_voidSetPinValue+0x19a>
     f90:	80 95       	com	r24
     f92:	84 23       	and	r24, r20
     f94:	8c 93       	st	X, r24
		}
	}
}
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <DIO_u8GetPinValue>:
/************************************************************/
/* Description :  function to Get the value of any pin 		*/
/************************************************************/

u8	DIO_u8GetPinValue(u8	copy_u8PinNum)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <DIO_u8GetPinValue+0x6>
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
     faa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8ReturnPinValue;
	if(copy_u8PinNum >= DIO_U8_PORTA_START && copy_u8PinNum <= DIO_U8_PORTA_END)
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	88 30       	cpi	r24, 0x08	; 8
     fb0:	90 f4       	brcc	.+36     	; 0xfd6 <DIO_u8GetPinValue+0x36>
	{
		Loc_u8ReturnPinValue = GET_BIT(PINA, copy_u8PinNum);
     fb2:	e9 e3       	ldi	r30, 0x39	; 57
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	88 2f       	mov	r24, r24
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a9 01       	movw	r20, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <DIO_u8GetPinValue+0x2a>
     fc6:	55 95       	asr	r21
     fc8:	47 95       	ror	r20
     fca:	8a 95       	dec	r24
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <DIO_u8GetPinValue+0x26>
     fce:	ca 01       	movw	r24, r20
     fd0:	81 70       	andi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	50 c0       	rjmp	.+160    	; 0x1076 <DIO_u8GetPinValue+0xd6>
	}
	else if(copy_u8PinNum >= DIO_U8_PORTB_START && copy_u8PinNum <= DIO_U8_PORTB_END)
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	88 30       	cpi	r24, 0x08	; 8
     fda:	c0 f0       	brcs	.+48     	; 0x100c <DIO_u8GetPinValue+0x6c>
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	80 31       	cpi	r24, 0x10	; 16
     fe0:	a8 f4       	brcc	.+42     	; 0x100c <DIO_u8GetPinValue+0x6c>
	{
		copy_u8PinNum = copy_u8PinNum - DIO_U8_PORTA_SIZE;
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	88 50       	subi	r24, 0x08	; 8
     fe6:	8a 83       	std	Y+2, r24	; 0x02
		Loc_u8ReturnPinValue = GET_BIT(PINB, copy_u8PinNum);
     fe8:	e6 e3       	ldi	r30, 0x36	; 54
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_u8GetPinValue+0x60>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_u8GetPinValue+0x5c>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	89 83       	std	Y+1, r24	; 0x01
    100a:	35 c0       	rjmp	.+106    	; 0x1076 <DIO_u8GetPinValue+0xd6>
		
	}
	
	else if(copy_u8PinNum >= DIO_U8_PORTC_START && copy_u8PinNum <= DIO_U8_PORTC_END)
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	80 31       	cpi	r24, 0x10	; 16
    1010:	c0 f0       	brcs	.+48     	; 0x1042 <DIO_u8GetPinValue+0xa2>
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	88 31       	cpi	r24, 0x18	; 24
    1016:	a8 f4       	brcc	.+42     	; 0x1042 <DIO_u8GetPinValue+0xa2>
	{
		copy_u8PinNum = copy_u8PinNum - (DIO_U8_PORTA_SIZE + DIO_U8_PORTB_SIZE);
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	80 51       	subi	r24, 0x10	; 16
    101c:	8a 83       	std	Y+2, r24	; 0x02
		
		Loc_u8ReturnPinValue = GET_BIT(PINC, copy_u8PinNum);
    101e:	e3 e3       	ldi	r30, 0x33	; 51
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a9 01       	movw	r20, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_u8GetPinValue+0x96>
    1032:	55 95       	asr	r21
    1034:	47 95       	ror	r20
    1036:	8a 95       	dec	r24
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_u8GetPinValue+0x92>
    103a:	ca 01       	movw	r24, r20
    103c:	81 70       	andi	r24, 0x01	; 1
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	1a c0       	rjmp	.+52     	; 0x1076 <DIO_u8GetPinValue+0xd6>
	}
	
	else if(copy_u8PinNum >= DIO_U8_PORTD_START && copy_u8PinNum <= DIO_U8_PORTD_END)
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	88 31       	cpi	r24, 0x18	; 24
    1046:	b8 f0       	brcs	.+46     	; 0x1076 <DIO_u8GetPinValue+0xd6>
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	80 32       	cpi	r24, 0x20	; 32
    104c:	a0 f4       	brcc	.+40     	; 0x1076 <DIO_u8GetPinValue+0xd6>
	{
		copy_u8PinNum = copy_u8PinNum - (DIO_U8_PORTA_SIZE + DIO_U8_PORTB_SIZE + DIO_U8_PORTC_SIZE);
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	88 51       	subi	r24, 0x18	; 24
    1052:	8a 83       	std	Y+2, r24	; 0x02
		
		Loc_u8ReturnPinValue = GET_BIT(PIND, copy_u8PinNum);
    1054:	e0 e3       	ldi	r30, 0x30	; 48
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a9 01       	movw	r20, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_u8GetPinValue+0xcc>
    1068:	55 95       	asr	r21
    106a:	47 95       	ror	r20
    106c:	8a 95       	dec	r24
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_u8GetPinValue+0xc8>
    1070:	ca 01       	movw	r24, r20
    1072:	81 70       	andi	r24, 0x01	; 1
    1074:	89 83       	std	Y+1, r24	; 0x01
	}
	return Loc_u8ReturnPinValue;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <DIO_voidSetPinDirection>:
/* 		Description :  function to set the direction of any */
/*				  pin to OUTPUT or INPUT					*/
/************************************************************/

void	DIO_voidSetPinDirection(u8	copy_u8PinNum, u8	copy_u8PinDir)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <DIO_voidSetPinDirection+0x6>
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8PinNum >= DIO_U8_PORTA_START && copy_u8PinNum <= DIO_U8_PORTA_END)
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	88 30       	cpi	r24, 0x08	; 8
    1094:	60 f5       	brcc	.+88     	; 0x10ee <DIO_voidSetPinDirection+0x6c>
	{
		if(copy_u8PinDir == DIO_u8_OUTPUT)
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	a1 f4       	brne	.+40     	; 0x10c4 <DIO_voidSetPinDirection+0x42>
		{
			SET_BIT(DDRA, copy_u8PinNum);
    109c:	aa e3       	ldi	r26, 0x3A	; 58
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ea e3       	ldi	r30, 0x3A	; 58
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_voidSetPinDirection+0x38>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_voidSetPinDirection+0x34>
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	b3 c0       	rjmp	.+358    	; 0x122a <DIO_voidSetPinDirection+0x1a8>
		}
		else
		{
			CLEAR_BIT(DDRA, copy_u8PinNum);
    10c4:	aa e3       	ldi	r26, 0x3A	; 58
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ea e3       	ldi	r30, 0x3A	; 58
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_voidSetPinDirection+0x60>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <DIO_voidSetPinDirection+0x5c>
    10e6:	80 95       	com	r24
    10e8:	84 23       	and	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	9e c0       	rjmp	.+316    	; 0x122a <DIO_voidSetPinDirection+0x1a8>
		}
	}
	else if(copy_u8PinNum >= DIO_U8_PORTB_START && copy_u8PinNum <= DIO_U8_PORTB_END)
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	88 30       	cpi	r24, 0x08	; 8
    10f2:	90 f1       	brcs	.+100    	; 0x1158 <DIO_voidSetPinDirection+0xd6>
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	80 31       	cpi	r24, 0x10	; 16
    10f8:	78 f5       	brcc	.+94     	; 0x1158 <DIO_voidSetPinDirection+0xd6>
	{
		copy_u8PinNum = copy_u8PinNum - DIO_U8_PORTA_SIZE;
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	88 50       	subi	r24, 0x08	; 8
    10fe:	89 83       	std	Y+1, r24	; 0x01
		if(copy_u8PinDir == DIO_u8_OUTPUT)
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	a1 f4       	brne	.+40     	; 0x112e <DIO_voidSetPinDirection+0xac>
		{
			SET_BIT(DDRB, copy_u8PinNum);
    1106:	a7 e3       	ldi	r26, 0x37	; 55
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e7 e3       	ldi	r30, 0x37	; 55
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_voidSetPinDirection+0xa2>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_voidSetPinDirection+0x9e>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	7e c0       	rjmp	.+252    	; 0x122a <DIO_voidSetPinDirection+0x1a8>
		}
		else
		{
			CLEAR_BIT(DDRB, copy_u8PinNum);
    112e:	a7 e3       	ldi	r26, 0x37	; 55
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e7 e3       	ldi	r30, 0x37	; 55
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	48 2f       	mov	r20, r24
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 2e       	mov	r0, r18
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_voidSetPinDirection+0xca>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	0a 94       	dec	r0
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_voidSetPinDirection+0xc6>
    1150:	80 95       	com	r24
    1152:	84 23       	and	r24, r20
    1154:	8c 93       	st	X, r24
    1156:	69 c0       	rjmp	.+210    	; 0x122a <DIO_voidSetPinDirection+0x1a8>
		}
	}
	
	else if(copy_u8PinNum >= DIO_U8_PORTC_START && copy_u8PinNum <= DIO_U8_PORTC_END)
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	80 31       	cpi	r24, 0x10	; 16
    115c:	90 f1       	brcs	.+100    	; 0x11c2 <DIO_voidSetPinDirection+0x140>
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	88 31       	cpi	r24, 0x18	; 24
    1162:	78 f5       	brcc	.+94     	; 0x11c2 <DIO_voidSetPinDirection+0x140>
	{
		copy_u8PinNum = copy_u8PinNum - (DIO_U8_PORTA_SIZE + DIO_U8_PORTB_SIZE);
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	80 51       	subi	r24, 0x10	; 16
    1168:	89 83       	std	Y+1, r24	; 0x01
		
		if(copy_u8PinDir == DIO_u8_OUTPUT)
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	a1 f4       	brne	.+40     	; 0x1198 <DIO_voidSetPinDirection+0x116>
		{
			SET_BIT(DDRC, copy_u8PinNum);
    1170:	a4 e3       	ldi	r26, 0x34	; 52
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e4 e3       	ldi	r30, 0x34	; 52
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_voidSetPinDirection+0x10c>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_voidSetPinDirection+0x108>
    1192:	84 2b       	or	r24, r20
    1194:	8c 93       	st	X, r24
    1196:	49 c0       	rjmp	.+146    	; 0x122a <DIO_voidSetPinDirection+0x1a8>
		}
		else
		{
			CLEAR_BIT(DDRC, copy_u8PinNum);
    1198:	a4 e3       	ldi	r26, 0x34	; 52
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e4 e3       	ldi	r30, 0x34	; 52
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	48 2f       	mov	r20, r24
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_voidSetPinDirection+0x134>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_voidSetPinDirection+0x130>
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	34 c0       	rjmp	.+104    	; 0x122a <DIO_voidSetPinDirection+0x1a8>
		}
	}
	
	else if(copy_u8PinNum >= DIO_U8_PORTD_START && copy_u8PinNum <= DIO_U8_PORTD_END)
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	88 31       	cpi	r24, 0x18	; 24
    11c6:	88 f1       	brcs	.+98     	; 0x122a <DIO_voidSetPinDirection+0x1a8>
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	80 32       	cpi	r24, 0x20	; 32
    11cc:	70 f5       	brcc	.+92     	; 0x122a <DIO_voidSetPinDirection+0x1a8>
	{
		copy_u8PinNum = copy_u8PinNum - (DIO_U8_PORTA_SIZE + DIO_U8_PORTB_SIZE + DIO_U8_PORTC_SIZE);
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	88 51       	subi	r24, 0x18	; 24
    11d2:	89 83       	std	Y+1, r24	; 0x01
		
		if(copy_u8PinDir == DIO_u8_OUTPUT)
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	a1 f4       	brne	.+40     	; 0x1202 <DIO_voidSetPinDirection+0x180>
		{
			SET_BIT(DDRD, copy_u8PinNum);
    11da:	a1 e3       	ldi	r26, 0x31	; 49
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e1 e3       	ldi	r30, 0x31	; 49
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	48 2f       	mov	r20, r24
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	02 2e       	mov	r0, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_voidSetPinDirection+0x176>
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	0a 94       	dec	r0
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_voidSetPinDirection+0x172>
    11fc:	84 2b       	or	r24, r20
    11fe:	8c 93       	st	X, r24
    1200:	14 c0       	rjmp	.+40     	; 0x122a <DIO_voidSetPinDirection+0x1a8>
		}
		else
		{
			CLEAR_BIT(DDRD, copy_u8PinNum);
    1202:	a1 e3       	ldi	r26, 0x31	; 49
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e1 e3       	ldi	r30, 0x31	; 49
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	48 2f       	mov	r20, r24
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	28 2f       	mov	r18, r24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 2e       	mov	r0, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_voidSetPinDirection+0x19e>
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	0a 94       	dec	r0
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_voidSetPinDirection+0x19a>
    1224:	80 95       	com	r24
    1226:	84 23       	and	r24, r20
    1228:	8c 93       	st	X, r24
		}
	}
}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <DIO_voidTogglePin>:
/************************************************************/
/* Description :  function to Toggle the value of any 		*/
/*				  pin to LOW or HIGH						*/
/************************************************************/
void	DIO_voidTogglePin(u8	copy_u8PinNum)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	0f 92       	push	r0
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_u8PinNum >= DIO_U8_PORTA_START && copy_u8PinNum <= DIO_U8_PORTA_END)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	88 30       	cpi	r24, 0x08	; 8
    1244:	a0 f4       	brcc	.+40     	; 0x126e <DIO_voidTogglePin+0x3a>
	{
		
		TOGGLE_BIT(PORTA, copy_u8PinNum);
    1246:	ab e3       	ldi	r26, 0x3B	; 59
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	eb e3       	ldi	r30, 0x3B	; 59
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	02 2e       	mov	r0, r18
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <DIO_voidTogglePin+0x30>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <DIO_voidTogglePin+0x2c>
    1268:	84 27       	eor	r24, r20
    126a:	8c 93       	st	X, r24
    126c:	56 c0       	rjmp	.+172    	; 0x131a <DIO_voidTogglePin+0xe6>
		
	}
	else if(copy_u8PinNum >= DIO_U8_PORTB_START && copy_u8PinNum <= DIO_U8_PORTB_END)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	88 30       	cpi	r24, 0x08	; 8
    1272:	d0 f0       	brcs	.+52     	; 0x12a8 <DIO_voidTogglePin+0x74>
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	80 31       	cpi	r24, 0x10	; 16
    1278:	b8 f4       	brcc	.+46     	; 0x12a8 <DIO_voidTogglePin+0x74>
	{
		copy_u8PinNum = copy_u8PinNum - DIO_U8_PORTA_SIZE;
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	88 50       	subi	r24, 0x08	; 8
    127e:	89 83       	std	Y+1, r24	; 0x01
		
		TOGGLE_BIT(PORTB, copy_u8PinNum);
    1280:	a8 e3       	ldi	r26, 0x38	; 56
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e8 e3       	ldi	r30, 0x38	; 56
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_voidTogglePin+0x6a>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO_voidTogglePin+0x66>
    12a2:	84 27       	eor	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	39 c0       	rjmp	.+114    	; 0x131a <DIO_voidTogglePin+0xe6>
		
	}
	
	else if(copy_u8PinNum >= DIO_U8_PORTC_START && copy_u8PinNum <= DIO_U8_PORTC_END)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	80 31       	cpi	r24, 0x10	; 16
    12ac:	d0 f0       	brcs	.+52     	; 0x12e2 <DIO_voidTogglePin+0xae>
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	88 31       	cpi	r24, 0x18	; 24
    12b2:	b8 f4       	brcc	.+46     	; 0x12e2 <DIO_voidTogglePin+0xae>
	{
		copy_u8PinNum = copy_u8PinNum - (DIO_U8_PORTA_SIZE + DIO_U8_PORTB_SIZE);
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	80 51       	subi	r24, 0x10	; 16
    12b8:	89 83       	std	Y+1, r24	; 0x01
		
		TOGGLE_BIT(PORTC, copy_u8PinNum);
    12ba:	a5 e3       	ldi	r26, 0x35	; 53
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e5 e3       	ldi	r30, 0x35	; 53
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_voidTogglePin+0xa4>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_voidTogglePin+0xa0>
    12dc:	84 27       	eor	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	1c c0       	rjmp	.+56     	; 0x131a <DIO_voidTogglePin+0xe6>
		
	}
	
	else if(copy_u8PinNum >= DIO_U8_PORTD_START && copy_u8PinNum <= DIO_U8_PORTD_END)
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	88 31       	cpi	r24, 0x18	; 24
    12e6:	c8 f0       	brcs	.+50     	; 0x131a <DIO_voidTogglePin+0xe6>
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	80 32       	cpi	r24, 0x20	; 32
    12ec:	b0 f4       	brcc	.+44     	; 0x131a <DIO_voidTogglePin+0xe6>
	{
		copy_u8PinNum = copy_u8PinNum - (DIO_U8_PORTA_SIZE + DIO_U8_PORTB_SIZE + DIO_U8_PORTC_SIZE);
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	88 51       	subi	r24, 0x18	; 24
    12f2:	89 83       	std	Y+1, r24	; 0x01
		
		TOGGLE_BIT(PORTD, copy_u8PinNum);
    12f4:	a2 e3       	ldi	r26, 0x32	; 50
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e2 e3       	ldi	r30, 0x32	; 50
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_voidTogglePin+0xde>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_voidTogglePin+0xda>
    1316:	84 27       	eor	r24, r20
    1318:	8c 93       	st	X, r24
		
	}
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <EXTI0_VoidInitialization>:
/************************************************************/
/* Description :  function for initialization The Interrupt	*/
/************************************************************/

void	EXTI0_VoidInitialization(void)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
	#elif SenseMode == FallingEdge
		CLEAR_BIT(MCUCR, 0);
		SET_BIT(MCUCR, 1);
		
	#elif SenseMode == RisingEdge
		SET_BIT(MCUCR, 0);
    132a:	a5 e5       	ldi	r26, 0x55	; 85
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e5 e5       	ldi	r30, 0x55	; 85
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	81 60       	ori	r24, 0x01	; 1
    1336:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 1);
    1338:	a5 e5       	ldi	r26, 0x55	; 85
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e5 e5       	ldi	r30, 0x55	; 85
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	82 60       	ori	r24, 0x02	; 2
    1344:	8c 93       	st	X, r24
	#endif
	
	/**	Disable the Interrupt 	*/
	CLEAR_BIT(GICR, 6);
    1346:	ab e5       	ldi	r26, 0x5B	; 91
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	eb e5       	ldi	r30, 0x5B	; 91
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	8f 7b       	andi	r24, 0xBF	; 191
    1352:	8c 93       	st	X, r24
	/**	clear the int flag 		*/
	SET_BIT(GIFR, 6);
    1354:	aa e5       	ldi	r26, 0x5A	; 90
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ea e5       	ldi	r30, 0x5A	; 90
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	80 64       	ori	r24, 0x40	; 64
    1360:	8c 93       	st	X, r24
}
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <EXTI0_VoidEnableEXTI0>:
/************************************************************/
/* Description :  function to Enable the Intterupt			*/
/************************************************************/

void	EXTI0_VoidEnableEXTI0()
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
	
	/**	Enable the external Interrupt 	*/
	SET_BIT(GICR, 6);
    1370:	ab e5       	ldi	r26, 0x5B	; 91
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	eb e5       	ldi	r30, 0x5B	; 91
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	80 64       	ori	r24, 0x40	; 64
    137c:	8c 93       	st	X, r24
	
}
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <EXTI0_VoidDisableEXTI0>:
/************************************************************/
/* Description :  function to Disable the Intterupt			*/
/************************************************************/

void	EXTI0_VoidDisableEXTI0()
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	
	/**	Disable the external Interrupt 	*/
	CLEAR_BIT(GICR, 6);
    138c:	ab e5       	ldi	r26, 0x5B	; 91
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	eb e5       	ldi	r30, 0x5B	; 91
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	8f 7b       	andi	r24, 0xBF	; 191
    1398:	8c 93       	st	X, r24
	
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <EXTI0_VoidSetSenseMode>:
/************************************************************/
/* Description :  function to Set Sense Mode 				*/
/************************************************************/
	
void	EXTI0_VoidSetSenseMode(u8	copy_U8SenseMode)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	0f 92       	push	r0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	89 83       	std	Y+1, r24	; 0x01
	
	/**	Set The Sense Mode		*/
	if(   copy_U8SenseMode == LowLevel	)
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	85 30       	cpi	r24, 0x05	; 5
    13b0:	79 f4       	brne	.+30     	; 0x13d0 <EXTI0_VoidSetSenseMode+0x30>
	{
		CLEAR_BIT(MCUCR, 0);
    13b2:	a5 e5       	ldi	r26, 0x55	; 85
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e5 e5       	ldi	r30, 0x55	; 85
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	8e 7f       	andi	r24, 0xFE	; 254
    13be:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR, 1);
    13c0:	a5 e5       	ldi	r26, 0x55	; 85
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e5 e5       	ldi	r30, 0x55	; 85
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8d 7f       	andi	r24, 0xFD	; 253
    13cc:	8c 93       	st	X, r24
    13ce:	35 c0       	rjmp	.+106    	; 0x143a <EXTI0_VoidSetSenseMode+0x9a>
	}
	else if( copy_U8SenseMode == IOC	)
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	84 30       	cpi	r24, 0x04	; 4
    13d4:	79 f4       	brne	.+30     	; 0x13f4 <EXTI0_VoidSetSenseMode+0x54>
	{
		SET_BIT(MCUCR, 0);
    13d6:	a5 e5       	ldi	r26, 0x55	; 85
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e5       	ldi	r30, 0x55	; 85
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	81 60       	ori	r24, 0x01	; 1
    13e2:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR, 1);
    13e4:	a5 e5       	ldi	r26, 0x55	; 85
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e5       	ldi	r30, 0x55	; 85
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8d 7f       	andi	r24, 0xFD	; 253
    13f0:	8c 93       	st	X, r24
    13f2:	23 c0       	rjmp	.+70     	; 0x143a <EXTI0_VoidSetSenseMode+0x9a>
	}
	else if( copy_U8SenseMode == FallingEdge	)
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	79 f4       	brne	.+30     	; 0x1418 <EXTI0_VoidSetSenseMode+0x78>
	{
		CLEAR_BIT(MCUCR, 0);
    13fa:	a5 e5       	ldi	r26, 0x55	; 85
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e5       	ldi	r30, 0x55	; 85
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8e 7f       	andi	r24, 0xFE	; 254
    1406:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 1);
    1408:	a5 e5       	ldi	r26, 0x55	; 85
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e5       	ldi	r30, 0x55	; 85
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	82 60       	ori	r24, 0x02	; 2
    1414:	8c 93       	st	X, r24
    1416:	11 c0       	rjmp	.+34     	; 0x143a <EXTI0_VoidSetSenseMode+0x9a>
	}
	else if( copy_U8SenseMode == RisingEdge	)
    1418:	89 81       	ldd	r24, Y+1	; 0x01
    141a:	83 30       	cpi	r24, 0x03	; 3
    141c:	71 f4       	brne	.+28     	; 0x143a <EXTI0_VoidSetSenseMode+0x9a>
	{
		SET_BIT(MCUCR, 0);
    141e:	a5 e5       	ldi	r26, 0x55	; 85
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e5       	ldi	r30, 0x55	; 85
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	81 60       	ori	r24, 0x01	; 1
    142a:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 1);
    142c:	a5 e5       	ldi	r26, 0x55	; 85
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e5 e5       	ldi	r30, 0x55	; 85
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	82 60       	ori	r24, 0x02	; 2
    1438:	8c 93       	st	X, r24
	}
	else
	{
		//Error
	}
}
    143a:	0f 90       	pop	r0
    143c:	cf 91       	pop	r28
    143e:	df 91       	pop	r29
    1440:	08 95       	ret

00001442 <EXTI0_VoidSetCallBack>:
/************************************************************/
/* Description :  function to set callback function			*/
/************************************************************/

void	EXTI0_VoidSetCallBack(pf	copy_FuncAddress)
{
    1442:	df 93       	push	r29
    1444:	cf 93       	push	r28
    1446:	00 d0       	rcall	.+0      	; 0x1448 <EXTI0_VoidSetCallBack+0x6>
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	9a 83       	std	Y+2, r25	; 0x02
    144e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_FuncAddress != NULL)
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	31 f0       	breq	.+12     	; 0x1464 <EXTI0_VoidSetCallBack+0x22>
	{
		EXTI0_CallBackFunction = copy_FuncAddress;
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	9a 81       	ldd	r25, Y+2	; 0x02
    145c:	90 93 77 00 	sts	0x0077, r25
    1460:	80 93 76 00 	sts	0x0076, r24
	}
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <__vector_1>:

/** 			Linker Problem solved				 */
void __vector_1(void)	__attribute__((signal, used));

void __vector_1(void)
{
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	11 24       	eor	r1, r1
    1478:	2f 93       	push	r18
    147a:	3f 93       	push	r19
    147c:	4f 93       	push	r20
    147e:	5f 93       	push	r21
    1480:	6f 93       	push	r22
    1482:	7f 93       	push	r23
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	af 93       	push	r26
    148a:	bf 93       	push	r27
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CallBackFunction();
    1498:	e0 91 76 00 	lds	r30, 0x0076
    149c:	f0 91 77 00 	lds	r31, 0x0077
    14a0:	09 95       	icall
}
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	ff 91       	pop	r31
    14a8:	ef 91       	pop	r30
    14aa:	bf 91       	pop	r27
    14ac:	af 91       	pop	r26
    14ae:	9f 91       	pop	r25
    14b0:	8f 91       	pop	r24
    14b2:	7f 91       	pop	r23
    14b4:	6f 91       	pop	r22
    14b6:	5f 91       	pop	r21
    14b8:	4f 91       	pop	r20
    14ba:	3f 91       	pop	r19
    14bc:	2f 91       	pop	r18
    14be:	0f 90       	pop	r0
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	0f 90       	pop	r0
    14c4:	1f 90       	pop	r1
    14c6:	18 95       	reti

000014c8 <EXTI1_VoidInitialization>:
/************************************************************/
/* Description :  function for initialization The Interrupt	*/
/************************************************************/

void	EXTI1_VoidInitialization(void)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
	#elif SenseMode1 == FallingEdge
		CLEAR_BIT(MCUCR, 2);
		SET_BIT(MCUCR, 3);
		
	#elif SenseMode1 == RisingEdge
		SET_BIT(MCUCR, 2);
    14d0:	a5 e5       	ldi	r26, 0x55	; 85
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e5 e5       	ldi	r30, 0x55	; 85
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	84 60       	ori	r24, 0x04	; 4
    14dc:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 3);
    14de:	a5 e5       	ldi	r26, 0x55	; 85
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e5 e5       	ldi	r30, 0x55	; 85
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	88 60       	ori	r24, 0x08	; 8
    14ea:	8c 93       	st	X, r24
	#endif
	
	/**	Disable the Interrupt 	*/
	CLEAR_BIT(GICR, 7);
    14ec:	ab e5       	ldi	r26, 0x5B	; 91
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	eb e5       	ldi	r30, 0x5B	; 91
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	8f 77       	andi	r24, 0x7F	; 127
    14f8:	8c 93       	st	X, r24
	/**	clear the int flag 		*/
	SET_BIT(GIFR, 7);
    14fa:	aa e5       	ldi	r26, 0x5A	; 90
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ea e5       	ldi	r30, 0x5A	; 90
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	80 68       	ori	r24, 0x80	; 128
    1506:	8c 93       	st	X, r24
}
    1508:	cf 91       	pop	r28
    150a:	df 91       	pop	r29
    150c:	08 95       	ret

0000150e <EXTI1_VoidEnableEXTI1>:
/************************************************************/
/* Description :  function to Enable the Intterupt			*/
/************************************************************/

void	EXTI1_VoidEnableEXTI1()
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
	
	/**	Enable the external Interrupt 	*/
	SET_BIT(GICR, 7);
    1516:	ab e5       	ldi	r26, 0x5B	; 91
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	eb e5       	ldi	r30, 0x5B	; 91
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	80 68       	ori	r24, 0x80	; 128
    1522:	8c 93       	st	X, r24
	
}
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <EXTI1_VoidDisableEXTI1>:
/************************************************************/
/* Description :  function to Disable the Intterupt			*/
/************************************************************/

void	EXTI1_VoidDisableEXTI1()
{
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
	
	/**	Disable the external Interrupt 	*/
	CLEAR_BIT(GICR, 7);
    1532:	ab e5       	ldi	r26, 0x5B	; 91
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	eb e5       	ldi	r30, 0x5B	; 91
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	8f 77       	andi	r24, 0x7F	; 127
    153e:	8c 93       	st	X, r24
	
}
    1540:	cf 91       	pop	r28
    1542:	df 91       	pop	r29
    1544:	08 95       	ret

00001546 <EXTI1_VoidSetSenseMode>:
/************************************************************/
/* Description :  function to Set Sense Mode 				*/
/************************************************************/
	
void	EXTI1_VoidSetSenseMode(u8	copy_U8SenseMode)
{
    1546:	df 93       	push	r29
    1548:	cf 93       	push	r28
    154a:	0f 92       	push	r0
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01
	
	/**	Set The Sense Mode		*/
	if(   copy_U8SenseMode == LowLevel	)
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	85 30       	cpi	r24, 0x05	; 5
    1556:	79 f4       	brne	.+30     	; 0x1576 <EXTI1_VoidSetSenseMode+0x30>
	{
		CLEAR_BIT(MCUCR, 2);
    1558:	a5 e5       	ldi	r26, 0x55	; 85
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e5 e5       	ldi	r30, 0x55	; 85
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	8b 7f       	andi	r24, 0xFB	; 251
    1564:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR, 3);
    1566:	a5 e5       	ldi	r26, 0x55	; 85
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e5 e5       	ldi	r30, 0x55	; 85
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	87 7f       	andi	r24, 0xF7	; 247
    1572:	8c 93       	st	X, r24
    1574:	35 c0       	rjmp	.+106    	; 0x15e0 <EXTI1_VoidSetSenseMode+0x9a>
	}
	else if( copy_U8SenseMode == IOC	)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	84 30       	cpi	r24, 0x04	; 4
    157a:	79 f4       	brne	.+30     	; 0x159a <EXTI1_VoidSetSenseMode+0x54>
	{
		SET_BIT(MCUCR, 2);
    157c:	a5 e5       	ldi	r26, 0x55	; 85
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	e5 e5       	ldi	r30, 0x55	; 85
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	84 60       	ori	r24, 0x04	; 4
    1588:	8c 93       	st	X, r24
		CLEAR_BIT(MCUCR, 3);
    158a:	a5 e5       	ldi	r26, 0x55	; 85
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e5 e5       	ldi	r30, 0x55	; 85
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	87 7f       	andi	r24, 0xF7	; 247
    1596:	8c 93       	st	X, r24
    1598:	23 c0       	rjmp	.+70     	; 0x15e0 <EXTI1_VoidSetSenseMode+0x9a>
	}
	else if( copy_U8SenseMode == FallingEdge	)
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	82 30       	cpi	r24, 0x02	; 2
    159e:	79 f4       	brne	.+30     	; 0x15be <EXTI1_VoidSetSenseMode+0x78>
	{
		CLEAR_BIT(MCUCR, 2);
    15a0:	a5 e5       	ldi	r26, 0x55	; 85
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e5 e5       	ldi	r30, 0x55	; 85
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	8b 7f       	andi	r24, 0xFB	; 251
    15ac:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 3);
    15ae:	a5 e5       	ldi	r26, 0x55	; 85
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e5 e5       	ldi	r30, 0x55	; 85
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	88 60       	ori	r24, 0x08	; 8
    15ba:	8c 93       	st	X, r24
    15bc:	11 c0       	rjmp	.+34     	; 0x15e0 <EXTI1_VoidSetSenseMode+0x9a>
	}
	else if( copy_U8SenseMode == RisingEdge	)
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	83 30       	cpi	r24, 0x03	; 3
    15c2:	71 f4       	brne	.+28     	; 0x15e0 <EXTI1_VoidSetSenseMode+0x9a>
	{
		SET_BIT(MCUCR, 2);
    15c4:	a5 e5       	ldi	r26, 0x55	; 85
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e5 e5       	ldi	r30, 0x55	; 85
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	84 60       	ori	r24, 0x04	; 4
    15d0:	8c 93       	st	X, r24
		SET_BIT(MCUCR, 3);
    15d2:	a5 e5       	ldi	r26, 0x55	; 85
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e5 e5       	ldi	r30, 0x55	; 85
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	88 60       	ori	r24, 0x08	; 8
    15de:	8c 93       	st	X, r24
	}
	else
	{
		//Error
	}
}
    15e0:	0f 90       	pop	r0
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <EXTI1_VoidSetCallBack>:
/************************************************************/
/* Description :  function to set callback function			*/
/************************************************************/

void	EXTI1_VoidSetCallBack(pf	copy_FuncAddress)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <EXTI1_VoidSetCallBack+0x6>
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	9a 83       	std	Y+2, r25	; 0x02
    15f4:	89 83       	std	Y+1, r24	; 0x01
	if(copy_FuncAddress != NULL)
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	9a 81       	ldd	r25, Y+2	; 0x02
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	31 f0       	breq	.+12     	; 0x160a <EXTI1_VoidSetCallBack+0x22>
	{
		EXTI1_CallBackFunction = copy_FuncAddress;
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	9a 81       	ldd	r25, Y+2	; 0x02
    1602:	90 93 79 00 	sts	0x0079, r25
    1606:	80 93 78 00 	sts	0x0078, r24
	}
}
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <__vector_2>:

/** 			Linker Problem solved				 */
void __vector_2(void)	__attribute__((signal, used));

void __vector_2(void)
{
    1614:	1f 92       	push	r1
    1616:	0f 92       	push	r0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	0f 92       	push	r0
    161c:	11 24       	eor	r1, r1
    161e:	2f 93       	push	r18
    1620:	3f 93       	push	r19
    1622:	4f 93       	push	r20
    1624:	5f 93       	push	r21
    1626:	6f 93       	push	r22
    1628:	7f 93       	push	r23
    162a:	8f 93       	push	r24
    162c:	9f 93       	push	r25
    162e:	af 93       	push	r26
    1630:	bf 93       	push	r27
    1632:	ef 93       	push	r30
    1634:	ff 93       	push	r31
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
	EXTI1_CallBackFunction();
    163e:	e0 91 78 00 	lds	r30, 0x0078
    1642:	f0 91 79 00 	lds	r31, 0x0079
    1646:	09 95       	icall
}
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	ff 91       	pop	r31
    164e:	ef 91       	pop	r30
    1650:	bf 91       	pop	r27
    1652:	af 91       	pop	r26
    1654:	9f 91       	pop	r25
    1656:	8f 91       	pop	r24
    1658:	7f 91       	pop	r23
    165a:	6f 91       	pop	r22
    165c:	5f 91       	pop	r21
    165e:	4f 91       	pop	r20
    1660:	3f 91       	pop	r19
    1662:	2f 91       	pop	r18
    1664:	0f 90       	pop	r0
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	0f 90       	pop	r0
    166a:	1f 90       	pop	r1
    166c:	18 95       	reti

0000166e <EXTI2_VoidInitialization>:
/************************************************************/
/* Description :  function for initialization The Interrupt	*/
/************************************************************/

void	EXTI2_VoidInitialization(void)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	/**	Set The Sense Mode		*/
	#if SenseMode2 == FallingEdge
		CLEAR_BIT(MCUCSR, 6);
		
	#elif SenseMode2 == RisingEdge
		SET_BIT(MCUCSR, 6);
    1676:	a4 e5       	ldi	r26, 0x54	; 84
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e4 e5       	ldi	r30, 0x54	; 84
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	80 64       	ori	r24, 0x40	; 64
    1682:	8c 93       	st	X, r24
	#endif
	
	/**	Disable the Interrupt 	*/
	CLEAR_BIT(GICR, 5);
    1684:	ab e5       	ldi	r26, 0x5B	; 91
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	eb e5       	ldi	r30, 0x5B	; 91
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8f 7d       	andi	r24, 0xDF	; 223
    1690:	8c 93       	st	X, r24
	/**	clear the int flag 		*/
	SET_BIT(GIFR, 5);
    1692:	aa e5       	ldi	r26, 0x5A	; 90
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ea e5       	ldi	r30, 0x5A	; 90
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	80 62       	ori	r24, 0x20	; 32
    169e:	8c 93       	st	X, r24
}
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <EXTI2_VoidEnableEXTI2>:
/************************************************************/
/* Description :  function to Enable the Intterupt			*/
/************************************************************/

void	EXTI2_VoidEnableEXTI2()
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	
	/**	Enable the external Interrupt 	*/
	SET_BIT(GICR, 5);
    16ae:	ab e5       	ldi	r26, 0x5B	; 91
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	eb e5       	ldi	r30, 0x5B	; 91
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	80 62       	ori	r24, 0x20	; 32
    16ba:	8c 93       	st	X, r24
	
}
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <EXTI2_VoidDisableEXTI2>:
/************************************************************/
/* Description :  function to Disable the Intterupt			*/
/************************************************************/

void	EXTI2_VoidDisableEXTI2()
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
	
	/**	Disable the external Interrupt 	*/
	CLEAR_BIT(GICR, 5);
    16ca:	ab e5       	ldi	r26, 0x5B	; 91
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	eb e5       	ldi	r30, 0x5B	; 91
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	8f 7d       	andi	r24, 0xDF	; 223
    16d6:	8c 93       	st	X, r24
	
}
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <EXTI2_VoidSetSenseMode>:
/************************************************************/
/* Description :  function to Set Sense Mode 				*/
/************************************************************/
	
void	EXTI2_VoidSetSenseMode(u8	copy_U8SenseMode)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	0f 92       	push	r0
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	89 83       	std	Y+1, r24	; 0x01
	
	/**	Set The Sense Mode		*/
	if( copy_U8SenseMode == FallingEdge	)
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	82 30       	cpi	r24, 0x02	; 2
    16ee:	41 f4       	brne	.+16     	; 0x1700 <EXTI2_VoidSetSenseMode+0x22>
	{
		CLEAR_BIT(MCUCR, 6);
    16f0:	a5 e5       	ldi	r26, 0x55	; 85
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e5 e5       	ldi	r30, 0x55	; 85
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8f 7b       	andi	r24, 0xBF	; 191
    16fc:	8c 93       	st	X, r24
    16fe:	0a c0       	rjmp	.+20     	; 0x1714 <EXTI2_VoidSetSenseMode+0x36>
	}
	else if( copy_U8SenseMode == RisingEdge	)
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	83 30       	cpi	r24, 0x03	; 3
    1704:	39 f4       	brne	.+14     	; 0x1714 <EXTI2_VoidSetSenseMode+0x36>
	{
		SET_BIT(MCUCR, 6);
    1706:	a5 e5       	ldi	r26, 0x55	; 85
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e5 e5       	ldi	r30, 0x55	; 85
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	80 64       	ori	r24, 0x40	; 64
    1712:	8c 93       	st	X, r24
	}
	else
	{
		//Error
	}
}
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <EXTI2_VoidSetCallBack>:
/************************************************************/
/* Description :  function to set callback function			*/
/************************************************************/

void	EXTI2_VoidSetCallBack(pf	copy_FuncAddress)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <EXTI2_VoidSetCallBack+0x6>
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	9a 83       	std	Y+2, r25	; 0x02
    1728:	89 83       	std	Y+1, r24	; 0x01
	if(copy_FuncAddress != NULL)
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	9a 81       	ldd	r25, Y+2	; 0x02
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	31 f0       	breq	.+12     	; 0x173e <EXTI2_VoidSetCallBack+0x22>
	{
		EXTI2_CallBackFunction = copy_FuncAddress;
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	90 93 7b 00 	sts	0x007B, r25
    173a:	80 93 7a 00 	sts	0x007A, r24
	}
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <__vector_3>:

/** 			Linker Problem solved				 */
void __vector_3(void)	__attribute__((signal, used));

void __vector_3(void)
{
    1748:	1f 92       	push	r1
    174a:	0f 92       	push	r0
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	0f 92       	push	r0
    1750:	11 24       	eor	r1, r1
    1752:	2f 93       	push	r18
    1754:	3f 93       	push	r19
    1756:	4f 93       	push	r20
    1758:	5f 93       	push	r21
    175a:	6f 93       	push	r22
    175c:	7f 93       	push	r23
    175e:	8f 93       	push	r24
    1760:	9f 93       	push	r25
    1762:	af 93       	push	r26
    1764:	bf 93       	push	r27
    1766:	ef 93       	push	r30
    1768:	ff 93       	push	r31
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
	EXTI2_CallBackFunction();
    1772:	e0 91 7a 00 	lds	r30, 0x007A
    1776:	f0 91 7b 00 	lds	r31, 0x007B
    177a:	09 95       	icall
}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	bf 91       	pop	r27
    1786:	af 91       	pop	r26
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <GIE_VoidGIEEnable>:
/* Pre_condition  :  this function must be used after  		*/
/*     				 Interrupt Initializtion	 			*/
/************************************************************/

void	GIE_VoidGIEEnable(void)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
    17aa:	af e5       	ldi	r26, 0x5F	; 95
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	ef e5       	ldi	r30, 0x5F	; 95
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	80 68       	ori	r24, 0x80	; 128
    17b6:	8c 93       	st	X, r24
}
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <GIE_VoidGIEDisable>:
/* Pre_condition  :  this function must be used after  		*/
/*     				 Interrupt Initializtion	 			*/
/************************************************************/

void	GIE_VoidGIEDisable(void)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG, 7);
    17c6:	af e5       	ldi	r26, 0x5F	; 95
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	ef e5       	ldi	r30, 0x5F	; 95
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	8f 77       	andi	r24, 0x7F	; 127
    17d2:	8c 93       	st	X, r24
}
    17d4:	cf 91       	pop	r28
    17d6:	df 91       	pop	r29
    17d8:	08 95       	ret

000017da <SEV_VoidSET7SegmentValue>:
#include	"SEV_priv.h"



void	SEV_VoidSET7SegmentValue(u8	COPY_U8SEVSEGMENTNUM, u8	COPY_U8SEVSEGMENTVALUE)
{
    17da:	df 93       	push	r29
    17dc:	cf 93       	push	r28
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	62 97       	sbiw	r28, 0x12	; 18
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	8c 87       	std	Y+12, r24	; 0x0c
    17f0:	6d 87       	std	Y+13, r22	; 0x0d
	u8 SEG[10] = {0xC0 , 0xF9 , 0xA4 , 0xB0 , 0x99 , 0x92 , 0x82,0xf8, 0x80,0x90};
    17f2:	ae 01       	movw	r20, r28
    17f4:	4e 5f       	subi	r20, 0xFE	; 254
    17f6:	5f 4f       	sbci	r21, 0xFF	; 255
    17f8:	5f 87       	std	Y+15, r21	; 0x0f
    17fa:	4e 87       	std	Y+14, r20	; 0x0e
    17fc:	88 e6       	ldi	r24, 0x68	; 104
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	99 8b       	std	Y+17, r25	; 0x11
    1802:	88 8b       	std	Y+16, r24	; 0x10
    1804:	9a e0       	ldi	r25, 0x0A	; 10
    1806:	9a 8b       	std	Y+18, r25	; 0x12
    1808:	e8 89       	ldd	r30, Y+16	; 0x10
    180a:	f9 89       	ldd	r31, Y+17	; 0x11
    180c:	00 80       	ld	r0, Z
    180e:	48 89       	ldd	r20, Y+16	; 0x10
    1810:	59 89       	ldd	r21, Y+17	; 0x11
    1812:	4f 5f       	subi	r20, 0xFF	; 255
    1814:	5f 4f       	sbci	r21, 0xFF	; 255
    1816:	59 8b       	std	Y+17, r21	; 0x11
    1818:	48 8b       	std	Y+16, r20	; 0x10
    181a:	ee 85       	ldd	r30, Y+14	; 0x0e
    181c:	ff 85       	ldd	r31, Y+15	; 0x0f
    181e:	00 82       	st	Z, r0
    1820:	4e 85       	ldd	r20, Y+14	; 0x0e
    1822:	5f 85       	ldd	r21, Y+15	; 0x0f
    1824:	4f 5f       	subi	r20, 0xFF	; 255
    1826:	5f 4f       	sbci	r21, 0xFF	; 255
    1828:	5f 87       	std	Y+15, r21	; 0x0f
    182a:	4e 87       	std	Y+14, r20	; 0x0e
    182c:	5a 89       	ldd	r21, Y+18	; 0x12
    182e:	51 50       	subi	r21, 0x01	; 1
    1830:	5a 8b       	std	Y+18, r21	; 0x12
    1832:	8a 89       	ldd	r24, Y+18	; 0x12
    1834:	88 23       	and	r24, r24
    1836:	41 f7       	brne	.-48     	; 0x1808 <SEV_VoidSET7SegmentValue+0x2e>
	u8 LOC_u8_loop = SEV_SEG_START;
    1838:	19 82       	std	Y+1, r1	; 0x01
	if(COPY_U8SEVSEGMENTNUM	== SEV_SEG_LEFT)
    183a:	8c 85       	ldd	r24, Y+12	; 0x0c
    183c:	81 30       	cpi	r24, 0x01	; 1
    183e:	09 f0       	breq	.+2      	; 0x1842 <SEV_VoidSET7SegmentValue+0x68>
    1840:	f1 c0       	rjmp	.+482    	; 0x1a24 <SEV_VoidSET7SegmentValue+0x24a>
	{
		DIO_voidSetPinValue(SEV_1_U8_A, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    1842:	8d 85       	ldd	r24, Y+13	; 0x0d
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	ce 01       	movw	r24, r28
    184a:	02 96       	adiw	r24, 0x02	; 2
    184c:	fc 01       	movw	r30, r24
    184e:	e2 0f       	add	r30, r18
    1850:	f3 1f       	adc	r31, r19
    1852:	80 81       	ld	r24, Z
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	f9 01       	movw	r30, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <SEV_VoidSET7SegmentValue+0x8c>
    1862:	f5 95       	asr	r31
    1864:	e7 95       	ror	r30
    1866:	8a 95       	dec	r24
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <SEV_VoidSET7SegmentValue+0x88>
    186a:	cf 01       	movw	r24, r30
    186c:	98 2f       	mov	r25, r24
    186e:	91 70       	andi	r25, 0x01	; 1
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	8f 5f       	subi	r24, 0xFF	; 255
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	88 e0       	ldi	r24, 0x08	; 8
    1878:	69 2f       	mov	r22, r25
    187a:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_1_U8_B, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    187e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	ce 01       	movw	r24, r28
    1886:	02 96       	adiw	r24, 0x02	; 2
    1888:	fc 01       	movw	r30, r24
    188a:	e2 0f       	add	r30, r18
    188c:	f3 1f       	adc	r31, r19
    188e:	80 81       	ld	r24, Z
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	88 2f       	mov	r24, r24
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a9 01       	movw	r20, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <SEV_VoidSET7SegmentValue+0xc8>
    189e:	55 95       	asr	r21
    18a0:	47 95       	ror	r20
    18a2:	8a 95       	dec	r24
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <SEV_VoidSET7SegmentValue+0xc4>
    18a6:	ca 01       	movw	r24, r20
    18a8:	98 2f       	mov	r25, r24
    18aa:	91 70       	andi	r25, 0x01	; 1
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	8f 5f       	subi	r24, 0xFF	; 255
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	89 e0       	ldi	r24, 0x09	; 9
    18b4:	69 2f       	mov	r22, r25
    18b6:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_1_U8_C, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    18ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	ce 01       	movw	r24, r28
    18c2:	02 96       	adiw	r24, 0x02	; 2
    18c4:	fc 01       	movw	r30, r24
    18c6:	e2 0f       	add	r30, r18
    18c8:	f3 1f       	adc	r31, r19
    18ca:	80 81       	ld	r24, Z
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	f9 01       	movw	r30, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <SEV_VoidSET7SegmentValue+0x104>
    18da:	f5 95       	asr	r31
    18dc:	e7 95       	ror	r30
    18de:	8a 95       	dec	r24
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <SEV_VoidSET7SegmentValue+0x100>
    18e2:	cf 01       	movw	r24, r30
    18e4:	98 2f       	mov	r25, r24
    18e6:	91 70       	andi	r25, 0x01	; 1
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	8a e0       	ldi	r24, 0x0A	; 10
    18f0:	69 2f       	mov	r22, r25
    18f2:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_1_U8_D, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    18f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	ce 01       	movw	r24, r28
    18fe:	02 96       	adiw	r24, 0x02	; 2
    1900:	fc 01       	movw	r30, r24
    1902:	e2 0f       	add	r30, r18
    1904:	f3 1f       	adc	r31, r19
    1906:	80 81       	ld	r24, Z
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	a9 01       	movw	r20, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <SEV_VoidSET7SegmentValue+0x140>
    1916:	55 95       	asr	r21
    1918:	47 95       	ror	r20
    191a:	8a 95       	dec	r24
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <SEV_VoidSET7SegmentValue+0x13c>
    191e:	ca 01       	movw	r24, r20
    1920:	98 2f       	mov	r25, r24
    1922:	91 70       	andi	r25, 0x01	; 1
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	8b e0       	ldi	r24, 0x0B	; 11
    192c:	69 2f       	mov	r22, r25
    192e:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_1_U8_E, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    1932:	8d 85       	ldd	r24, Y+13	; 0x0d
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	ce 01       	movw	r24, r28
    193a:	02 96       	adiw	r24, 0x02	; 2
    193c:	fc 01       	movw	r30, r24
    193e:	e2 0f       	add	r30, r18
    1940:	f3 1f       	adc	r31, r19
    1942:	80 81       	ld	r24, Z
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	88 2f       	mov	r24, r24
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	f9 01       	movw	r30, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <SEV_VoidSET7SegmentValue+0x17c>
    1952:	f5 95       	asr	r31
    1954:	e7 95       	ror	r30
    1956:	8a 95       	dec	r24
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <SEV_VoidSET7SegmentValue+0x178>
    195a:	cf 01       	movw	r24, r30
    195c:	98 2f       	mov	r25, r24
    195e:	91 70       	andi	r25, 0x01	; 1
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	8c e0       	ldi	r24, 0x0C	; 12
    1968:	69 2f       	mov	r22, r25
    196a:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_1_U8_F, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    196e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	ce 01       	movw	r24, r28
    1976:	02 96       	adiw	r24, 0x02	; 2
    1978:	fc 01       	movw	r30, r24
    197a:	e2 0f       	add	r30, r18
    197c:	f3 1f       	adc	r31, r19
    197e:	80 81       	ld	r24, Z
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	88 2f       	mov	r24, r24
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a9 01       	movw	r20, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <SEV_VoidSET7SegmentValue+0x1b8>
    198e:	55 95       	asr	r21
    1990:	47 95       	ror	r20
    1992:	8a 95       	dec	r24
    1994:	e2 f7       	brpl	.-8      	; 0x198e <SEV_VoidSET7SegmentValue+0x1b4>
    1996:	ca 01       	movw	r24, r20
    1998:	98 2f       	mov	r25, r24
    199a:	91 70       	andi	r25, 0x01	; 1
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	8f 5f       	subi	r24, 0xFF	; 255
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	8d e0       	ldi	r24, 0x0D	; 13
    19a4:	69 2f       	mov	r22, r25
    19a6:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_1_U8_G, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    19aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	ce 01       	movw	r24, r28
    19b2:	02 96       	adiw	r24, 0x02	; 2
    19b4:	fc 01       	movw	r30, r24
    19b6:	e2 0f       	add	r30, r18
    19b8:	f3 1f       	adc	r31, r19
    19ba:	80 81       	ld	r24, Z
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	f9 01       	movw	r30, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <SEV_VoidSET7SegmentValue+0x1f4>
    19ca:	f5 95       	asr	r31
    19cc:	e7 95       	ror	r30
    19ce:	8a 95       	dec	r24
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <SEV_VoidSET7SegmentValue+0x1f0>
    19d2:	cf 01       	movw	r24, r30
    19d4:	98 2f       	mov	r25, r24
    19d6:	91 70       	andi	r25, 0x01	; 1
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	8e e0       	ldi	r24, 0x0E	; 14
    19e0:	69 2f       	mov	r22, r25
    19e2:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_1_U8_H, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    19e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	ce 01       	movw	r24, r28
    19ee:	02 96       	adiw	r24, 0x02	; 2
    19f0:	fc 01       	movw	r30, r24
    19f2:	e2 0f       	add	r30, r18
    19f4:	f3 1f       	adc	r31, r19
    19f6:	80 81       	ld	r24, Z
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a9 01       	movw	r20, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <SEV_VoidSET7SegmentValue+0x230>
    1a06:	55 95       	asr	r21
    1a08:	47 95       	ror	r20
    1a0a:	8a 95       	dec	r24
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <SEV_VoidSET7SegmentValue+0x22c>
    1a0e:	ca 01       	movw	r24, r20
    1a10:	98 2f       	mov	r25, r24
    1a12:	91 70       	andi	r25, 0x01	; 1
    1a14:	89 81       	ldd	r24, Y+1	; 0x01
    1a16:	8f 5f       	subi	r24, 0xFF	; 255
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	8f e0       	ldi	r24, 0x0F	; 15
    1a1c:	69 2f       	mov	r22, r25
    1a1e:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
    1a22:	f4 c0       	rjmp	.+488    	; 0x1c0c <SEV_VoidSET7SegmentValue+0x432>
	}
	else if(COPY_U8SEVSEGMENTNUM	== 	SEV_SEG_RIGHT)
    1a24:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a26:	88 23       	and	r24, r24
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <SEV_VoidSET7SegmentValue+0x252>
    1a2a:	f0 c0       	rjmp	.+480    	; 0x1c0c <SEV_VoidSET7SegmentValue+0x432>
	{
		DIO_voidSetPinValue(SEV_0_U8_A, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    1a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	ce 01       	movw	r24, r28
    1a34:	02 96       	adiw	r24, 0x02	; 2
    1a36:	fc 01       	movw	r30, r24
    1a38:	e2 0f       	add	r30, r18
    1a3a:	f3 1f       	adc	r31, r19
    1a3c:	80 81       	ld	r24, Z
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	f9 01       	movw	r30, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <SEV_VoidSET7SegmentValue+0x276>
    1a4c:	f5 95       	asr	r31
    1a4e:	e7 95       	ror	r30
    1a50:	8a 95       	dec	r24
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <SEV_VoidSET7SegmentValue+0x272>
    1a54:	cf 01       	movw	r24, r30
    1a56:	98 2f       	mov	r25, r24
    1a58:	91 70       	andi	r25, 0x01	; 1
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	8f 5f       	subi	r24, 0xFF	; 255
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	69 2f       	mov	r22, r25
    1a64:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_0_U8_B, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    1a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	ce 01       	movw	r24, r28
    1a70:	02 96       	adiw	r24, 0x02	; 2
    1a72:	fc 01       	movw	r30, r24
    1a74:	e2 0f       	add	r30, r18
    1a76:	f3 1f       	adc	r31, r19
    1a78:	80 81       	ld	r24, Z
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	88 2f       	mov	r24, r24
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	a9 01       	movw	r20, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <SEV_VoidSET7SegmentValue+0x2b2>
    1a88:	55 95       	asr	r21
    1a8a:	47 95       	ror	r20
    1a8c:	8a 95       	dec	r24
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <SEV_VoidSET7SegmentValue+0x2ae>
    1a90:	ca 01       	movw	r24, r20
    1a92:	98 2f       	mov	r25, r24
    1a94:	91 70       	andi	r25, 0x01	; 1
    1a96:	89 81       	ldd	r24, Y+1	; 0x01
    1a98:	8f 5f       	subi	r24, 0xFF	; 255
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	82 e0       	ldi	r24, 0x02	; 2
    1a9e:	69 2f       	mov	r22, r25
    1aa0:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_0_U8_C, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    1aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	ce 01       	movw	r24, r28
    1aac:	02 96       	adiw	r24, 0x02	; 2
    1aae:	fc 01       	movw	r30, r24
    1ab0:	e2 0f       	add	r30, r18
    1ab2:	f3 1f       	adc	r31, r19
    1ab4:	80 81       	ld	r24, Z
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	f9 01       	movw	r30, r18
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <SEV_VoidSET7SegmentValue+0x2ee>
    1ac4:	f5 95       	asr	r31
    1ac6:	e7 95       	ror	r30
    1ac8:	8a 95       	dec	r24
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <SEV_VoidSET7SegmentValue+0x2ea>
    1acc:	cf 01       	movw	r24, r30
    1ace:	98 2f       	mov	r25, r24
    1ad0:	91 70       	andi	r25, 0x01	; 1
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	8f 5f       	subi	r24, 0xFF	; 255
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	83 e0       	ldi	r24, 0x03	; 3
    1ada:	69 2f       	mov	r22, r25
    1adc:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_0_U8_D, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    1ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae2:	28 2f       	mov	r18, r24
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	02 96       	adiw	r24, 0x02	; 2
    1aea:	fc 01       	movw	r30, r24
    1aec:	e2 0f       	add	r30, r18
    1aee:	f3 1f       	adc	r31, r19
    1af0:	80 81       	ld	r24, Z
    1af2:	28 2f       	mov	r18, r24
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	88 2f       	mov	r24, r24
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	a9 01       	movw	r20, r18
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <SEV_VoidSET7SegmentValue+0x32a>
    1b00:	55 95       	asr	r21
    1b02:	47 95       	ror	r20
    1b04:	8a 95       	dec	r24
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <SEV_VoidSET7SegmentValue+0x326>
    1b08:	ca 01       	movw	r24, r20
    1b0a:	98 2f       	mov	r25, r24
    1b0c:	91 70       	andi	r25, 0x01	; 1
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	8f 5f       	subi	r24, 0xFF	; 255
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	84 e0       	ldi	r24, 0x04	; 4
    1b16:	69 2f       	mov	r22, r25
    1b18:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_0_U8_E, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    1b1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	ce 01       	movw	r24, r28
    1b24:	02 96       	adiw	r24, 0x02	; 2
    1b26:	fc 01       	movw	r30, r24
    1b28:	e2 0f       	add	r30, r18
    1b2a:	f3 1f       	adc	r31, r19
    1b2c:	80 81       	ld	r24, Z
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	f9 01       	movw	r30, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <SEV_VoidSET7SegmentValue+0x366>
    1b3c:	f5 95       	asr	r31
    1b3e:	e7 95       	ror	r30
    1b40:	8a 95       	dec	r24
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <SEV_VoidSET7SegmentValue+0x362>
    1b44:	cf 01       	movw	r24, r30
    1b46:	98 2f       	mov	r25, r24
    1b48:	91 70       	andi	r25, 0x01	; 1
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	8f 5f       	subi	r24, 0xFF	; 255
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	85 e0       	ldi	r24, 0x05	; 5
    1b52:	69 2f       	mov	r22, r25
    1b54:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_0_U8_F, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    1b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	ce 01       	movw	r24, r28
    1b60:	02 96       	adiw	r24, 0x02	; 2
    1b62:	fc 01       	movw	r30, r24
    1b64:	e2 0f       	add	r30, r18
    1b66:	f3 1f       	adc	r31, r19
    1b68:	80 81       	ld	r24, Z
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a9 01       	movw	r20, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <SEV_VoidSET7SegmentValue+0x3a2>
    1b78:	55 95       	asr	r21
    1b7a:	47 95       	ror	r20
    1b7c:	8a 95       	dec	r24
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <SEV_VoidSET7SegmentValue+0x39e>
    1b80:	ca 01       	movw	r24, r20
    1b82:	98 2f       	mov	r25, r24
    1b84:	91 70       	andi	r25, 0x01	; 1
    1b86:	89 81       	ldd	r24, Y+1	; 0x01
    1b88:	8f 5f       	subi	r24, 0xFF	; 255
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	86 e0       	ldi	r24, 0x06	; 6
    1b8e:	69 2f       	mov	r22, r25
    1b90:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_0_U8_G, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	02 96       	adiw	r24, 0x02	; 2
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	e2 0f       	add	r30, r18
    1ba2:	f3 1f       	adc	r31, r19
    1ba4:	80 81       	ld	r24, Z
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	f9 01       	movw	r30, r18
    1bb2:	02 c0       	rjmp	.+4      	; 0x1bb8 <SEV_VoidSET7SegmentValue+0x3de>
    1bb4:	f5 95       	asr	r31
    1bb6:	e7 95       	ror	r30
    1bb8:	8a 95       	dec	r24
    1bba:	e2 f7       	brpl	.-8      	; 0x1bb4 <SEV_VoidSET7SegmentValue+0x3da>
    1bbc:	cf 01       	movw	r24, r30
    1bbe:	98 2f       	mov	r25, r24
    1bc0:	91 70       	andi	r25, 0x01	; 1
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	8f 5f       	subi	r24, 0xFF	; 255
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	87 e0       	ldi	r24, 0x07	; 7
    1bca:	69 2f       	mov	r22, r25
    1bcc:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		DIO_voidSetPinValue(SEV_0_U8_H, GET_BIT(SEG[COPY_U8SEVSEGMENTVALUE], (LOC_u8_loop++) ));
    1bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	ce 01       	movw	r24, r28
    1bd8:	02 96       	adiw	r24, 0x02	; 2
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e2 0f       	add	r30, r18
    1bde:	f3 1f       	adc	r31, r19
    1be0:	80 81       	ld	r24, Z
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a9 01       	movw	r20, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <SEV_VoidSET7SegmentValue+0x41a>
    1bf0:	55 95       	asr	r21
    1bf2:	47 95       	ror	r20
    1bf4:	8a 95       	dec	r24
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <SEV_VoidSET7SegmentValue+0x416>
    1bf8:	ca 01       	movw	r24, r20
    1bfa:	98 2f       	mov	r25, r24
    1bfc:	91 70       	andi	r25, 0x01	; 1
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	8f 5f       	subi	r24, 0xFF	; 255
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	87 e0       	ldi	r24, 0x07	; 7
    1c06:	69 2f       	mov	r22, r25
    1c08:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
	}
    1c0c:	62 96       	adiw	r28, 0x12	; 18
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <TIMER0_VoidInitialization>:
/*				  input	 :	void							*/
/*				  output :	void							*/
/************************************************************/

void	TIMER0_VoidInitialization(void)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
	#elif	TIMER0_PRESCALLER	==	CLK_NO_PRES
		SET_BIT(TCCR0, 0);
		CLEAR_BIT(TCCR0, 1);
		CLEAR_BIT(TCCR0, 2);
	#elif	TIMER0_PRESCALLER	==	PRES_8_DIV
		CLEAR_BIT(TCCR0, 0);
    1c26:	a3 e5       	ldi	r26, 0x53	; 83
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e3 e5       	ldi	r30, 0x53	; 83
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	8e 7f       	andi	r24, 0xFE	; 254
    1c32:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 1);
    1c34:	a3 e5       	ldi	r26, 0x53	; 83
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e3 e5       	ldi	r30, 0x53	; 83
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	82 60       	ori	r24, 0x02	; 2
    1c40:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, 2);
    1c42:	a3 e5       	ldi	r26, 0x53	; 83
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e3 e5       	ldi	r30, 0x53	; 83
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	8b 7f       	andi	r24, 0xFB	; 251
    1c4e:	8c 93       	st	X, r24
	#endif
	
	
/**			TIMER0 Mode Selection Options				*/
	#if		TIMER0_MODE			==	TIMER0_NORMAL
		CLEAR_BIT(TCCR0, 3);
    1c50:	a3 e5       	ldi	r26, 0x53	; 83
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e3 e5       	ldi	r30, 0x53	; 83
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	87 7f       	andi	r24, 0xF7	; 247
    1c5c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, 6);
    1c5e:	a3 e5       	ldi	r26, 0x53	; 83
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e3 e5       	ldi	r30, 0x53	; 83
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	8f 7b       	andi	r24, 0xBF	; 191
    1c6a:	8c 93       	st	X, r24
	


	/**			Compare Output Mode Selection Options	*/
	#if		TIMER0_COM_EVENT	==	TIMER0_NO_ACTION
		CLEAR_BIT(TCCR0, 4);
    1c6c:	a3 e5       	ldi	r26, 0x53	; 83
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e3 e5       	ldi	r30, 0x53	; 83
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	8f 7e       	andi	r24, 0xEF	; 239
    1c78:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, 5);
    1c7a:	a3 e5       	ldi	r26, 0x53	; 83
    1c7c:	b0 e0       	ldi	r27, 0x00	; 0
    1c7e:	e3 e5       	ldi	r30, 0x53	; 83
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	8f 7d       	andi	r24, 0xDF	; 223
    1c86:	8c 93       	st	X, r24
		SET_BIT(TCCR0, 4);
		SET_BIT(TCCR0, 5);
	#endif
	
	/**			Disable	OverFlow Interrupt				*/
	CLEAR_BIT(TIMSK, 0);
    1c88:	a9 e5       	ldi	r26, 0x59	; 89
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e9 e5       	ldi	r30, 0x59	; 89
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	8e 7f       	andi	r24, 0xFE	; 254
    1c94:	8c 93       	st	X, r24
	
	/**			Disable Output Comapre Match Interrupt	*/
	CLEAR_BIT(TIMSK, 1);
    1c96:	a9 e5       	ldi	r26, 0x59	; 89
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e9 e5       	ldi	r30, 0x59	; 89
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8d 7f       	andi	r24, 0xFD	; 253
    1ca2:	8c 93       	st	X, r24
	
	/**			Clear Output Comapre Match Flag			*/
	SET_BIT(TIFR, 0);
    1ca4:	a8 e5       	ldi	r26, 0x58	; 88
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e8 e5       	ldi	r30, 0x58	; 88
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	81 60       	ori	r24, 0x01	; 1
    1cb0:	8c 93       	st	X, r24
	
	/**			Clear OverFlow Flag						*/
	SET_BIT(TIFR, 1);
    1cb2:	a8 e5       	ldi	r26, 0x58	; 88
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e8 e5       	ldi	r30, 0x58	; 88
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	82 60       	ori	r24, 0x02	; 2
    1cbe:	8c 93       	st	X, r24
	
	/**			Free OverFlow and OCR	Regesters		*/
	TCNT0	=	0x00;
    1cc0:	e2 e5       	ldi	r30, 0x52	; 82
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	10 82       	st	Z, r1
	OCR0	=	0x00;
    1cc6:	ec e5       	ldi	r30, 0x5C	; 92
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	10 82       	st	Z, r1
}
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <TIMER0_VoidEnableOVInterrupt>:
/* Pre_condition  :  this function must be used after  		*/
/*     				 TIMER0 Initializtion	 				*/
/************************************************************/

void	TIMER0_VoidEnableOVInterrupt(void)
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 0);
    1cda:	a9 e5       	ldi	r26, 0x59	; 89
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	e9 e5       	ldi	r30, 0x59	; 89
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	80 81       	ld	r24, Z
    1ce4:	81 60       	ori	r24, 0x01	; 1
    1ce6:	8c 93       	st	X, r24
}
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <TIMER0_VoidDisableOVInterrupt>:
/* Pre_condition  :  this function must be used after  		*/
/*     				 TIMER0 Initializtion	 				*/
/************************************************************/

void	TIMER0_VoidDisableOVInterrupt(void)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	cd b7       	in	r28, 0x3d	; 61
    1cf4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, 0);
    1cf6:	a9 e5       	ldi	r26, 0x59	; 89
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e9 e5       	ldi	r30, 0x59	; 89
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	8e 7f       	andi	r24, 0xFE	; 254
    1d02:	8c 93       	st	X, r24
}
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <TIMER0_VoidEnableCTCInterrupt>:
/* Pre_condition  :  this function must be used after  		*/
/*     				 TIMER0 Initializtion	 				*/
/************************************************************/

void	TIMER0_VoidEnableCTCInterrupt(void)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK, 1);
    1d12:	a9 e5       	ldi	r26, 0x59	; 89
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e9 e5       	ldi	r30, 0x59	; 89
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	82 60       	ori	r24, 0x02	; 2
    1d1e:	8c 93       	st	X, r24
}
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <TIMER0_VoidDisableCTCInterrupt>:
/* Pre_condition  :  this function must be used after  		*/
/*     				 TIMER0 Initializtion	 				*/
/************************************************************/

void	TIMER0_VoidDisableCTCInterrupt(void)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, 1);
    1d2e:	a9 e5       	ldi	r26, 0x59	; 89
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e9 e5       	ldi	r30, 0x59	; 89
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	8d 7f       	andi	r24, 0xFD	; 253
    1d3a:	8c 93       	st	X, r24
}
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <TIMER0_VoidSetTIMER0REG>:
/* Pre_condition  :  this function must be used after  		*/
/*     				 Timer0 Enable			 				*/
/************************************************************/

void	TIMER0_VoidSetTIMER0REG(u8 Copy_u8TIMER0REG)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	0f 92       	push	r0
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0	=	Copy_u8TIMER0REG;
    1d4e:	e2 e5       	ldi	r30, 0x52	; 82
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	80 83       	st	Z, r24
}
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <TIMER0_VoidSetOCRREG>:
/************************************************************/
/* Pre_condition  :  this function must be used after  		*/
/*     				 Timer0 initialized 					*/
/************************************************************/
void	TIMER0_VoidSetOCRREG(u8 Copy_u8OCRREG)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	0f 92       	push	r0
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	89 83       	std	Y+1, r24	; 0x01
	OCR0	=	Copy_u8OCRREG;
    1d6a:	ec e5       	ldi	r30, 0x5C	; 92
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	80 83       	st	Z, r24
}
    1d72:	0f 90       	pop	r0
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <TIMER0_VoidSetOVCallback>:
/* Pre_condition  :  this function must be used after  		*/
/*     				 enable OverFlow Interrupt 				*/
/************************************************************/

void	TIMER0_VoidSetOVCallback(pf	copy_FunctionAdress)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <TIMER0_VoidSetOVCallback+0x6>
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
    1d84:	9a 83       	std	Y+2, r25	; 0x02
    1d86:	89 83       	std	Y+1, r24	; 0x01
	Timer0_OV_CallBack	=	copy_FunctionAdress;
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8c:	90 93 7d 00 	sts	0x007D, r25
    1d90:	80 93 7c 00 	sts	0x007C, r24
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	cf 91       	pop	r28
    1d9a:	df 91       	pop	r29
    1d9c:	08 95       	ret

00001d9e <TIMER0_VoidSetCTCCallback>:
/* Pre_condition  :  this function must be used after  		*/
/*     				 enable CTC Interrupt 				*/
/************************************************************/

void	TIMER0_VoidSetCTCCallback(pf	copy_FunctionAdress)
{
    1d9e:	df 93       	push	r29
    1da0:	cf 93       	push	r28
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <TIMER0_VoidSetCTCCallback+0x6>
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	9a 83       	std	Y+2, r25	; 0x02
    1daa:	89 83       	std	Y+1, r24	; 0x01
	Timer0_CTC_CallBack	=	copy_FunctionAdress;
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	90 93 7f 00 	sts	0x007F, r25
    1db4:	80 93 7e 00 	sts	0x007E, r24
}
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <__vector_11>:


void	__vector_11(void)	__attribute__((signal, used));
void	__vector_11(void)
{
    1dc2:	1f 92       	push	r1
    1dc4:	0f 92       	push	r0
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	0f 92       	push	r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	2f 93       	push	r18
    1dce:	3f 93       	push	r19
    1dd0:	4f 93       	push	r20
    1dd2:	5f 93       	push	r21
    1dd4:	6f 93       	push	r22
    1dd6:	7f 93       	push	r23
    1dd8:	8f 93       	push	r24
    1dda:	9f 93       	push	r25
    1ddc:	af 93       	push	r26
    1dde:	bf 93       	push	r27
    1de0:	ef 93       	push	r30
    1de2:	ff 93       	push	r31
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
	Timer0_OV_CallBack();
    1dec:	e0 91 7c 00 	lds	r30, 0x007C
    1df0:	f0 91 7d 00 	lds	r31, 0x007D
    1df4:	09 95       	icall
}
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	ff 91       	pop	r31
    1dfc:	ef 91       	pop	r30
    1dfe:	bf 91       	pop	r27
    1e00:	af 91       	pop	r26
    1e02:	9f 91       	pop	r25
    1e04:	8f 91       	pop	r24
    1e06:	7f 91       	pop	r23
    1e08:	6f 91       	pop	r22
    1e0a:	5f 91       	pop	r21
    1e0c:	4f 91       	pop	r20
    1e0e:	3f 91       	pop	r19
    1e10:	2f 91       	pop	r18
    1e12:	0f 90       	pop	r0
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	0f 90       	pop	r0
    1e18:	1f 90       	pop	r1
    1e1a:	18 95       	reti

00001e1c <__vector_10>:


void	__vector_10(void)	__attribute__((signal, used));
void	__vector_10(void)
{
    1e1c:	1f 92       	push	r1
    1e1e:	0f 92       	push	r0
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	0f 92       	push	r0
    1e24:	11 24       	eor	r1, r1
    1e26:	2f 93       	push	r18
    1e28:	3f 93       	push	r19
    1e2a:	4f 93       	push	r20
    1e2c:	5f 93       	push	r21
    1e2e:	6f 93       	push	r22
    1e30:	7f 93       	push	r23
    1e32:	8f 93       	push	r24
    1e34:	9f 93       	push	r25
    1e36:	af 93       	push	r26
    1e38:	bf 93       	push	r27
    1e3a:	ef 93       	push	r30
    1e3c:	ff 93       	push	r31
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
	Timer0_CTC_CallBack();
    1e46:	e0 91 7e 00 	lds	r30, 0x007E
    1e4a:	f0 91 7f 00 	lds	r31, 0x007F
    1e4e:	09 95       	icall
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	ff 91       	pop	r31
    1e56:	ef 91       	pop	r30
    1e58:	bf 91       	pop	r27
    1e5a:	af 91       	pop	r26
    1e5c:	9f 91       	pop	r25
    1e5e:	8f 91       	pop	r24
    1e60:	7f 91       	pop	r23
    1e62:	6f 91       	pop	r22
    1e64:	5f 91       	pop	r21
    1e66:	4f 91       	pop	r20
    1e68:	3f 91       	pop	r19
    1e6a:	2f 91       	pop	r18
    1e6c:	0f 90       	pop	r0
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	0f 90       	pop	r0
    1e72:	1f 90       	pop	r1
    1e74:	18 95       	reti

00001e76 <main>:
void ON_OFFMode(void);


static u16 temperature;
int main(void)
{
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <main+0x6>
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <main+0x8>
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
	u8 temp1;
	u8 temp2;
	DIO_VoidInitialization();
    1e82:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <DIO_VoidInitialization>
	ADC_VoidInitialization();
    1e86:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_VoidInitialization>
	ADC_VoidADCEnable();
    1e8a:	0e 94 1a 06 	call	0xc34	; 0xc34 <ADC_VoidADCEnable>

	EXTI0_VoidInitialization();
    1e8e:	0e 94 91 09 	call	0x1322	; 0x1322 <EXTI0_VoidInitialization>
	EXTI0_VoidEnableEXTI0();
    1e92:	0e 94 b4 09 	call	0x1368	; 0x1368 <EXTI0_VoidEnableEXTI0>
	EXTI0_VoidSetCallBack(Water_Heat);
    1e96:	86 ea       	ldi	r24, 0xA6	; 166
    1e98:	9f e0       	ldi	r25, 0x0F	; 15
    1e9a:	0e 94 21 0a 	call	0x1442	; 0x1442 <EXTI0_VoidSetCallBack>

	EXTI1_VoidInitialization();
    1e9e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <EXTI1_VoidInitialization>
	EXTI1_VoidEnableEXTI1();
    1ea2:	0e 94 87 0a 	call	0x150e	; 0x150e <EXTI1_VoidEnableEXTI1>
	EXTI1_VoidSetCallBack(Water_Cool);
    1ea6:	83 ec       	ldi	r24, 0xC3	; 195
    1ea8:	90 e1       	ldi	r25, 0x10	; 16
    1eaa:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <EXTI1_VoidSetCallBack>

	EXTI2_VoidInitialization();
    1eae:	0e 94 37 0b 	call	0x166e	; 0x166e <EXTI2_VoidInitialization>
	EXTI2_VoidEnableEXTI2();
    1eb2:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <EXTI2_VoidEnableEXTI2>
	EXTI2_VoidSetCallBack(ON_OFFMode);
    1eb6:	80 ee       	ldi	r24, 0xE0	; 224
    1eb8:	91 e1       	ldi	r25, 0x11	; 17
    1eba:	0e 94 8e 0b 	call	0x171c	; 0x171c <EXTI2_VoidSetCallBack>

	GIE_VoidGIEEnable();
    1ebe:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GIE_VoidGIEEnable>
	TIMER0_VoidInitialization();
    1ec2:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <TIMER0_VoidInitialization>

	DIO_voidSetPinValue(DIO_PIN26, DIO_HIGH);
    1ec6:	8a e1       	ldi	r24, 0x1A	; 26
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PIN27, DIO_HIGH);
    1ece:	8b e1       	ldi	r24, 0x1B	; 27
    1ed0:	61 e0       	ldi	r22, 0x01	; 1
    1ed2:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_PIN13, DIO_HIGH);
    1ed6:	8d e0       	ldi	r24, 0x0D	; 13
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>


	for(int i=0; i<12; i++)
    1ede:	1a 82       	std	Y+2, r1	; 0x02
    1ee0:	19 82       	std	Y+1, r1	; 0x01
    1ee2:	14 c0       	rjmp	.+40     	; 0x1f0c <main+0x96>
	{
		Water_Heat();
    1ee4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <Water_Heat>
		temperature  = ADC_U16ReadADC();
    1ee8:	0e 94 28 06 	call	0xc50	; 0xc50 <ADC_U16ReadADC>
    1eec:	90 93 73 00 	sts	0x0073, r25
    1ef0:	80 93 72 00 	sts	0x0072, r24
		if(temperature == 60)
    1ef4:	80 91 72 00 	lds	r24, 0x0072
    1ef8:	90 91 73 00 	lds	r25, 0x0073
    1efc:	8c 33       	cpi	r24, 0x3C	; 60
    1efe:	91 05       	cpc	r25, r1
    1f00:	51 f0       	breq	.+20     	; 0x1f16 <main+0xa0>
	DIO_voidSetPinValue(DIO_PIN26, DIO_HIGH);
	DIO_voidSetPinValue(DIO_PIN27, DIO_HIGH);
	DIO_voidSetPinValue(DIO_PIN13, DIO_HIGH);


	for(int i=0; i<12; i++)
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	01 96       	adiw	r24, 0x01	; 1
    1f08:	9a 83       	std	Y+2, r25	; 0x02
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	8c 30       	cpi	r24, 0x0C	; 12
    1f12:	91 05       	cpc	r25, r1
    1f14:	3c f3       	brlt	.-50     	; 0x1ee4 <main+0x6e>
		}
	}

	while(1)
	{
		temperature  = ADC_U16ReadADC();
    1f16:	0e 94 28 06 	call	0xc50	; 0xc50 <ADC_U16ReadADC>
    1f1a:	90 93 73 00 	sts	0x0073, r25
    1f1e:	80 93 72 00 	sts	0x0072, r24

		temp1 = (u8)(temperature & 0xFF);
    1f22:	80 91 72 00 	lds	r24, 0x0072
    1f26:	90 91 73 00 	lds	r25, 0x0073
    1f2a:	8c 83       	std	Y+4, r24	; 0x04
		temp2 = (u8)(temperature >> 8);
    1f2c:	80 91 72 00 	lds	r24, 0x0072
    1f30:	90 91 73 00 	lds	r25, 0x0073
    1f34:	89 2f       	mov	r24, r25
    1f36:	99 27       	eor	r25, r25
    1f38:	8b 83       	std	Y+3, r24	; 0x03
		SEV_VoidSET7SegmentValue(SEV_SEG_RIGHT, temp1);
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	6c 81       	ldd	r22, Y+4	; 0x04
    1f3e:	0e 94 ed 0b 	call	0x17da	; 0x17da <SEV_VoidSET7SegmentValue>
		SEV_VoidSET7SegmentValue(SEV_SEG_RIGHT, temp2);
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	6b 81       	ldd	r22, Y+3	; 0x03
    1f46:	0e 94 ed 0b 	call	0x17da	; 0x17da <SEV_VoidSET7SegmentValue>
    1f4a:	e5 cf       	rjmp	.-54     	; 0x1f16 <main+0xa0>

00001f4c <Water_Heat>:
}



void Water_Heat(void)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	6e 97       	sbiw	r28, 0x1e	; 30
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
	if(temperature >= 0 && temperature < 75)
    1f60:	80 91 72 00 	lds	r24, 0x0072
    1f64:	90 91 73 00 	lds	r25, 0x0073
    1f68:	8b 34       	cpi	r24, 0x4B	; 75
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	08 f0       	brcs	.+2      	; 0x1f70 <Water_Heat+0x24>
    1f6e:	02 c1       	rjmp	.+516    	; 0x2174 <Water_Heat+0x228>
	{
		DIO_voidSetPinValue(DIO_PIN13, DIO_HIGH);
    1f70:	8d e0       	ldi	r24, 0x0D	; 13
    1f72:	61 e0       	ldi	r22, 0x01	; 1
    1f74:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		for(int i=0; i<5; i++){
    1f78:	1e 8e       	std	Y+30, r1	; 0x1e
    1f7a:	1d 8e       	std	Y+29, r1	; 0x1d
    1f7c:	f1 c0       	rjmp	.+482    	; 0x2160 <Water_Heat+0x214>
			DIO_voidSetPinValue(DIO_PIN13, DIO_HIGH);
    1f7e:	8d e0       	ldi	r24, 0x0D	; 13
    1f80:	61 e0       	ldi	r22, 0x01	; 1
    1f82:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	aa e7       	ldi	r26, 0x7A	; 122
    1f8c:	b4 e4       	ldi	r27, 0x44	; 68
    1f8e:	89 8f       	std	Y+25, r24	; 0x19
    1f90:	9a 8f       	std	Y+26, r25	; 0x1a
    1f92:	ab 8f       	std	Y+27, r26	; 0x1b
    1f94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f96:	69 8d       	ldd	r22, Y+25	; 0x19
    1f98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	4a ef       	ldi	r20, 0xFA	; 250
    1fa4:	54 e4       	ldi	r21, 0x44	; 68
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	8d 8b       	std	Y+21, r24	; 0x15
    1fb0:	9e 8b       	std	Y+22, r25	; 0x16
    1fb2:	af 8b       	std	Y+23, r26	; 0x17
    1fb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fba:	8f 89       	ldd	r24, Y+23	; 0x17
    1fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e8       	ldi	r20, 0x80	; 128
    1fc4:	5f e3       	ldi	r21, 0x3F	; 63
    1fc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fca:	88 23       	and	r24, r24
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <Water_Heat+0x8c>
		__ticks = 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9c 8b       	std	Y+20, r25	; 0x14
    1fd4:	8b 8b       	std	Y+19, r24	; 0x13
    1fd6:	3f c0       	rjmp	.+126    	; 0x2056 <Water_Heat+0x10a>
	else if (__tmp > 65535)
    1fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fda:	7e 89       	ldd	r23, Y+22	; 0x16
    1fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fde:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	3f ef       	ldi	r19, 0xFF	; 255
    1fe4:	4f e7       	ldi	r20, 0x7F	; 127
    1fe6:	57 e4       	ldi	r21, 0x47	; 71
    1fe8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fec:	18 16       	cp	r1, r24
    1fee:	4c f5       	brge	.+82     	; 0x2042 <Water_Heat+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e2       	ldi	r20, 0x20	; 32
    1ffe:	51 e4       	ldi	r21, 0x41	; 65
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	bc 01       	movw	r22, r24
    200a:	cd 01       	movw	r24, r26
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9c 8b       	std	Y+20, r25	; 0x14
    2016:	8b 8b       	std	Y+19, r24	; 0x13
    2018:	0f c0       	rjmp	.+30     	; 0x2038 <Water_Heat+0xec>
    201a:	88 ec       	ldi	r24, 0xC8	; 200
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	9a 8b       	std	Y+18, r25	; 0x12
    2020:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2022:	89 89       	ldd	r24, Y+17	; 0x11
    2024:	9a 89       	ldd	r25, Y+18	; 0x12
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <Water_Heat+0xda>
    202a:	9a 8b       	std	Y+18, r25	; 0x12
    202c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202e:	8b 89       	ldd	r24, Y+19	; 0x13
    2030:	9c 89       	ldd	r25, Y+20	; 0x14
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	9c 8b       	std	Y+20, r25	; 0x14
    2036:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2038:	8b 89       	ldd	r24, Y+19	; 0x13
    203a:	9c 89       	ldd	r25, Y+20	; 0x14
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	69 f7       	brne	.-38     	; 0x201a <Water_Heat+0xce>
    2040:	14 c0       	rjmp	.+40     	; 0x206a <Water_Heat+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2042:	6d 89       	ldd	r22, Y+21	; 0x15
    2044:	7e 89       	ldd	r23, Y+22	; 0x16
    2046:	8f 89       	ldd	r24, Y+23	; 0x17
    2048:	98 8d       	ldd	r25, Y+24	; 0x18
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9c 8b       	std	Y+20, r25	; 0x14
    2054:	8b 8b       	std	Y+19, r24	; 0x13
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	98 8b       	std	Y+16, r25	; 0x10
    205c:	8f 87       	std	Y+15, r24	; 0x0f
    205e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2060:	98 89       	ldd	r25, Y+16	; 0x10
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <Water_Heat+0x116>
    2066:	98 8b       	std	Y+16, r25	; 0x10
    2068:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			DIO_voidSetPinValue(DIO_PIN13, DIO_LOW);
    206a:	8d e0       	ldi	r24, 0x0D	; 13
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	aa e7       	ldi	r26, 0x7A	; 122
    2078:	b4 e4       	ldi	r27, 0x44	; 68
    207a:	8b 87       	std	Y+11, r24	; 0x0b
    207c:	9c 87       	std	Y+12, r25	; 0x0c
    207e:	ad 87       	std	Y+13, r26	; 0x0d
    2080:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2082:	6b 85       	ldd	r22, Y+11	; 0x0b
    2084:	7c 85       	ldd	r23, Y+12	; 0x0c
    2086:	8d 85       	ldd	r24, Y+13	; 0x0d
    2088:	9e 85       	ldd	r25, Y+14	; 0x0e
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4a ef       	ldi	r20, 0xFA	; 250
    2090:	54 e4       	ldi	r21, 0x44	; 68
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	8f 83       	std	Y+7, r24	; 0x07
    209c:	98 87       	std	Y+8, r25	; 0x08
    209e:	a9 87       	std	Y+9, r26	; 0x09
    20a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a2:	6f 81       	ldd	r22, Y+7	; 0x07
    20a4:	78 85       	ldd	r23, Y+8	; 0x08
    20a6:	89 85       	ldd	r24, Y+9	; 0x09
    20a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20aa:	20 e0       	ldi	r18, 0x00	; 0
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	40 e8       	ldi	r20, 0x80	; 128
    20b0:	5f e3       	ldi	r21, 0x3F	; 63
    20b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b6:	88 23       	and	r24, r24
    20b8:	2c f4       	brge	.+10     	; 0x20c4 <Water_Heat+0x178>
		__ticks = 1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9e 83       	std	Y+6, r25	; 0x06
    20c0:	8d 83       	std	Y+5, r24	; 0x05
    20c2:	3f c0       	rjmp	.+126    	; 0x2142 <Water_Heat+0x1f6>
	else if (__tmp > 65535)
    20c4:	6f 81       	ldd	r22, Y+7	; 0x07
    20c6:	78 85       	ldd	r23, Y+8	; 0x08
    20c8:	89 85       	ldd	r24, Y+9	; 0x09
    20ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	3f ef       	ldi	r19, 0xFF	; 255
    20d0:	4f e7       	ldi	r20, 0x7F	; 127
    20d2:	57 e4       	ldi	r21, 0x47	; 71
    20d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d8:	18 16       	cp	r1, r24
    20da:	4c f5       	brge	.+82     	; 0x212e <Water_Heat+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    20de:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e2       	ldi	r20, 0x20	; 32
    20ea:	51 e4       	ldi	r21, 0x41	; 65
    20ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	0f c0       	rjmp	.+30     	; 0x2124 <Water_Heat+0x1d8>
    2106:	88 ec       	ldi	r24, 0xC8	; 200
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9c 83       	std	Y+4, r25	; 0x04
    210c:	8b 83       	std	Y+3, r24	; 0x03
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <Water_Heat+0x1c6>
    2116:	9c 83       	std	Y+4, r25	; 0x04
    2118:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	01 97       	sbiw	r24, 0x01	; 1
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	9e 81       	ldd	r25, Y+6	; 0x06
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	69 f7       	brne	.-38     	; 0x2106 <Water_Heat+0x1ba>
    212c:	14 c0       	rjmp	.+40     	; 0x2156 <Water_Heat+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212e:	6f 81       	ldd	r22, Y+7	; 0x07
    2130:	78 85       	ldd	r23, Y+8	; 0x08
    2132:	89 85       	ldd	r24, Y+9	; 0x09
    2134:	9a 85       	ldd	r25, Y+10	; 0x0a
    2136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	9a 83       	std	Y+2, r25	; 0x02
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	9a 81       	ldd	r25, Y+2	; 0x02
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <Water_Heat+0x202>
    2152:	9a 83       	std	Y+2, r25	; 0x02
    2154:	89 83       	std	Y+1, r24	; 0x01
void Water_Heat(void)
{
	if(temperature >= 0 && temperature < 75)
	{
		DIO_voidSetPinValue(DIO_PIN13, DIO_HIGH);
		for(int i=0; i<5; i++){
    2156:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2158:	9e 8d       	ldd	r25, Y+30	; 0x1e
    215a:	01 96       	adiw	r24, 0x01	; 1
    215c:	9e 8f       	std	Y+30, r25	; 0x1e
    215e:	8d 8f       	std	Y+29, r24	; 0x1d
    2160:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2162:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2164:	85 30       	cpi	r24, 0x05	; 5
    2166:	91 05       	cpc	r25, r1
    2168:	0c f4       	brge	.+2      	; 0x216c <Water_Heat+0x220>
    216a:	09 cf       	rjmp	.-494    	; 0x1f7e <Water_Heat+0x32>
			DIO_voidSetPinValue(DIO_PIN13, DIO_HIGH);
			_delay_ms(1000);
			DIO_voidSetPinValue(DIO_PIN13, DIO_LOW);
			_delay_ms(1000);
		}
		DIO_voidSetPinValue(DIO_PIN13, DIO_LOW);
    216c:	8d e0       	ldi	r24, 0x0D	; 13
    216e:	60 e0       	ldi	r22, 0x00	; 0
    2170:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
	}else
	{

	}
}
    2174:	6e 96       	adiw	r28, 0x1e	; 30
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <Water_Cool>:




void Water_Cool(void)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	6e 97       	sbiw	r28, 0x1e	; 30
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
	if(temperature > 75)
    219a:	80 91 72 00 	lds	r24, 0x0072
    219e:	90 91 73 00 	lds	r25, 0x0073
    21a2:	8c 34       	cpi	r24, 0x4C	; 76
    21a4:	91 05       	cpc	r25, r1
    21a6:	08 f4       	brcc	.+2      	; 0x21aa <Water_Cool+0x24>
    21a8:	02 c1       	rjmp	.+516    	; 0x23ae <Water_Cool+0x228>
	{
		DIO_voidSetPinValue(DIO_PIN13, DIO_HIGH);
    21aa:	8d e0       	ldi	r24, 0x0D	; 13
    21ac:	61 e0       	ldi	r22, 0x01	; 1
    21ae:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
		for(int i=0; i<5; i++){
    21b2:	1e 8e       	std	Y+30, r1	; 0x1e
    21b4:	1d 8e       	std	Y+29, r1	; 0x1d
    21b6:	f1 c0       	rjmp	.+482    	; 0x239a <Water_Cool+0x214>
			DIO_voidSetPinValue(DIO_PIN13, DIO_HIGH);
    21b8:	8d e0       	ldi	r24, 0x0D	; 13
    21ba:	61 e0       	ldi	r22, 0x01	; 1
    21bc:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	aa e7       	ldi	r26, 0x7A	; 122
    21c6:	b4 e4       	ldi	r27, 0x44	; 68
    21c8:	89 8f       	std	Y+25, r24	; 0x19
    21ca:	9a 8f       	std	Y+26, r25	; 0x1a
    21cc:	ab 8f       	std	Y+27, r26	; 0x1b
    21ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d0:	69 8d       	ldd	r22, Y+25	; 0x19
    21d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	4a ef       	ldi	r20, 0xFA	; 250
    21de:	54 e4       	ldi	r21, 0x44	; 68
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	8d 8b       	std	Y+21, r24	; 0x15
    21ea:	9e 8b       	std	Y+22, r25	; 0x16
    21ec:	af 8b       	std	Y+23, r26	; 0x17
    21ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21f0:	6d 89       	ldd	r22, Y+21	; 0x15
    21f2:	7e 89       	ldd	r23, Y+22	; 0x16
    21f4:	8f 89       	ldd	r24, Y+23	; 0x17
    21f6:	98 8d       	ldd	r25, Y+24	; 0x18
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e8       	ldi	r20, 0x80	; 128
    21fe:	5f e3       	ldi	r21, 0x3F	; 63
    2200:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2204:	88 23       	and	r24, r24
    2206:	2c f4       	brge	.+10     	; 0x2212 <Water_Cool+0x8c>
		__ticks = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9c 8b       	std	Y+20, r25	; 0x14
    220e:	8b 8b       	std	Y+19, r24	; 0x13
    2210:	3f c0       	rjmp	.+126    	; 0x2290 <Water_Cool+0x10a>
	else if (__tmp > 65535)
    2212:	6d 89       	ldd	r22, Y+21	; 0x15
    2214:	7e 89       	ldd	r23, Y+22	; 0x16
    2216:	8f 89       	ldd	r24, Y+23	; 0x17
    2218:	98 8d       	ldd	r25, Y+24	; 0x18
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	3f ef       	ldi	r19, 0xFF	; 255
    221e:	4f e7       	ldi	r20, 0x7F	; 127
    2220:	57 e4       	ldi	r21, 0x47	; 71
    2222:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2226:	18 16       	cp	r1, r24
    2228:	4c f5       	brge	.+82     	; 0x227c <Water_Cool+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222a:	69 8d       	ldd	r22, Y+25	; 0x19
    222c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    222e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2230:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e2       	ldi	r20, 0x20	; 32
    2238:	51 e4       	ldi	r21, 0x41	; 65
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9c 8b       	std	Y+20, r25	; 0x14
    2250:	8b 8b       	std	Y+19, r24	; 0x13
    2252:	0f c0       	rjmp	.+30     	; 0x2272 <Water_Cool+0xec>
    2254:	88 ec       	ldi	r24, 0xC8	; 200
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	9a 8b       	std	Y+18, r25	; 0x12
    225a:	89 8b       	std	Y+17, r24	; 0x11
    225c:	89 89       	ldd	r24, Y+17	; 0x11
    225e:	9a 89       	ldd	r25, Y+18	; 0x12
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <Water_Cool+0xda>
    2264:	9a 8b       	std	Y+18, r25	; 0x12
    2266:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2268:	8b 89       	ldd	r24, Y+19	; 0x13
    226a:	9c 89       	ldd	r25, Y+20	; 0x14
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	9c 8b       	std	Y+20, r25	; 0x14
    2270:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2272:	8b 89       	ldd	r24, Y+19	; 0x13
    2274:	9c 89       	ldd	r25, Y+20	; 0x14
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	69 f7       	brne	.-38     	; 0x2254 <Water_Cool+0xce>
    227a:	14 c0       	rjmp	.+40     	; 0x22a4 <Water_Cool+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227c:	6d 89       	ldd	r22, Y+21	; 0x15
    227e:	7e 89       	ldd	r23, Y+22	; 0x16
    2280:	8f 89       	ldd	r24, Y+23	; 0x17
    2282:	98 8d       	ldd	r25, Y+24	; 0x18
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9c 8b       	std	Y+20, r25	; 0x14
    228e:	8b 8b       	std	Y+19, r24	; 0x13
    2290:	8b 89       	ldd	r24, Y+19	; 0x13
    2292:	9c 89       	ldd	r25, Y+20	; 0x14
    2294:	98 8b       	std	Y+16, r25	; 0x10
    2296:	8f 87       	std	Y+15, r24	; 0x0f
    2298:	8f 85       	ldd	r24, Y+15	; 0x0f
    229a:	98 89       	ldd	r25, Y+16	; 0x10
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <Water_Cool+0x116>
    22a0:	98 8b       	std	Y+16, r25	; 0x10
    22a2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			DIO_voidSetPinValue(DIO_PIN13, DIO_LOW);
    22a4:	8d e0       	ldi	r24, 0x0D	; 13
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	aa e7       	ldi	r26, 0x7A	; 122
    22b2:	b4 e4       	ldi	r27, 0x44	; 68
    22b4:	8b 87       	std	Y+11, r24	; 0x0b
    22b6:	9c 87       	std	Y+12, r25	; 0x0c
    22b8:	ad 87       	std	Y+13, r26	; 0x0d
    22ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22be:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	4a ef       	ldi	r20, 0xFA	; 250
    22ca:	54 e4       	ldi	r21, 0x44	; 68
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	8f 83       	std	Y+7, r24	; 0x07
    22d6:	98 87       	std	Y+8, r25	; 0x08
    22d8:	a9 87       	std	Y+9, r26	; 0x09
    22da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22dc:	6f 81       	ldd	r22, Y+7	; 0x07
    22de:	78 85       	ldd	r23, Y+8	; 0x08
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	40 e8       	ldi	r20, 0x80	; 128
    22ea:	5f e3       	ldi	r21, 0x3F	; 63
    22ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f0:	88 23       	and	r24, r24
    22f2:	2c f4       	brge	.+10     	; 0x22fe <Water_Cool+0x178>
		__ticks = 1;
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
    22fc:	3f c0       	rjmp	.+126    	; 0x237c <Water_Cool+0x1f6>
	else if (__tmp > 65535)
    22fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2300:	78 85       	ldd	r23, Y+8	; 0x08
    2302:	89 85       	ldd	r24, Y+9	; 0x09
    2304:	9a 85       	ldd	r25, Y+10	; 0x0a
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	3f ef       	ldi	r19, 0xFF	; 255
    230a:	4f e7       	ldi	r20, 0x7F	; 127
    230c:	57 e4       	ldi	r21, 0x47	; 71
    230e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2312:	18 16       	cp	r1, r24
    2314:	4c f5       	brge	.+82     	; 0x2368 <Water_Cool+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2316:	6b 85       	ldd	r22, Y+11	; 0x0b
    2318:	7c 85       	ldd	r23, Y+12	; 0x0c
    231a:	8d 85       	ldd	r24, Y+13	; 0x0d
    231c:	9e 85       	ldd	r25, Y+14	; 0x0e
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e2       	ldi	r20, 0x20	; 32
    2324:	51 e4       	ldi	r21, 0x41	; 65
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9e 83       	std	Y+6, r25	; 0x06
    233c:	8d 83       	std	Y+5, r24	; 0x05
    233e:	0f c0       	rjmp	.+30     	; 0x235e <Water_Cool+0x1d8>
    2340:	88 ec       	ldi	r24, 0xC8	; 200
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9c 83       	std	Y+4, r25	; 0x04
    2346:	8b 83       	std	Y+3, r24	; 0x03
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <Water_Cool+0x1c6>
    2350:	9c 83       	std	Y+4, r25	; 0x04
    2352:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	8d 81       	ldd	r24, Y+5	; 0x05
    2356:	9e 81       	ldd	r25, Y+6	; 0x06
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	69 f7       	brne	.-38     	; 0x2340 <Water_Cool+0x1ba>
    2366:	14 c0       	rjmp	.+40     	; 0x2390 <Water_Cool+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2368:	6f 81       	ldd	r22, Y+7	; 0x07
    236a:	78 85       	ldd	r23, Y+8	; 0x08
    236c:	89 85       	ldd	r24, Y+9	; 0x09
    236e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	9e 81       	ldd	r25, Y+6	; 0x06
    2380:	9a 83       	std	Y+2, r25	; 0x02
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	89 81       	ldd	r24, Y+1	; 0x01
    2386:	9a 81       	ldd	r25, Y+2	; 0x02
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <Water_Cool+0x202>
    238c:	9a 83       	std	Y+2, r25	; 0x02
    238e:	89 83       	std	Y+1, r24	; 0x01
void Water_Cool(void)
{
	if(temperature > 75)
	{
		DIO_voidSetPinValue(DIO_PIN13, DIO_HIGH);
		for(int i=0; i<5; i++){
    2390:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2392:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2394:	01 96       	adiw	r24, 0x01	; 1
    2396:	9e 8f       	std	Y+30, r25	; 0x1e
    2398:	8d 8f       	std	Y+29, r24	; 0x1d
    239a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    239c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    239e:	85 30       	cpi	r24, 0x05	; 5
    23a0:	91 05       	cpc	r25, r1
    23a2:	0c f4       	brge	.+2      	; 0x23a6 <Water_Cool+0x220>
    23a4:	09 cf       	rjmp	.-494    	; 0x21b8 <Water_Cool+0x32>
			DIO_voidSetPinValue(DIO_PIN13, DIO_HIGH);
			_delay_ms(1000);
			DIO_voidSetPinValue(DIO_PIN13, DIO_LOW);
			_delay_ms(1000);
		}
		DIO_voidSetPinValue(DIO_PIN13, DIO_LOW);
    23a6:	8d e0       	ldi	r24, 0x0D	; 13
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	0e 94 f7 06 	call	0xdee	; 0xdee <DIO_voidSetPinValue>
	}else
	{

	}
}
    23ae:	6e 96       	adiw	r28, 0x1e	; 30
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <ON_OFFMode>:




void ON_OFFMode(void)
{
    23c0:	df 93       	push	r29
    23c2:	cf 93       	push	r28
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62

}
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <__prologue_saves__>:
    23ce:	2f 92       	push	r2
    23d0:	3f 92       	push	r3
    23d2:	4f 92       	push	r4
    23d4:	5f 92       	push	r5
    23d6:	6f 92       	push	r6
    23d8:	7f 92       	push	r7
    23da:	8f 92       	push	r8
    23dc:	9f 92       	push	r9
    23de:	af 92       	push	r10
    23e0:	bf 92       	push	r11
    23e2:	cf 92       	push	r12
    23e4:	df 92       	push	r13
    23e6:	ef 92       	push	r14
    23e8:	ff 92       	push	r15
    23ea:	0f 93       	push	r16
    23ec:	1f 93       	push	r17
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	ca 1b       	sub	r28, r26
    23f8:	db 0b       	sbc	r29, r27
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	09 94       	ijmp

00002406 <__epilogue_restores__>:
    2406:	2a 88       	ldd	r2, Y+18	; 0x12
    2408:	39 88       	ldd	r3, Y+17	; 0x11
    240a:	48 88       	ldd	r4, Y+16	; 0x10
    240c:	5f 84       	ldd	r5, Y+15	; 0x0f
    240e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2410:	7d 84       	ldd	r7, Y+13	; 0x0d
    2412:	8c 84       	ldd	r8, Y+12	; 0x0c
    2414:	9b 84       	ldd	r9, Y+11	; 0x0b
    2416:	aa 84       	ldd	r10, Y+10	; 0x0a
    2418:	b9 84       	ldd	r11, Y+9	; 0x09
    241a:	c8 84       	ldd	r12, Y+8	; 0x08
    241c:	df 80       	ldd	r13, Y+7	; 0x07
    241e:	ee 80       	ldd	r14, Y+6	; 0x06
    2420:	fd 80       	ldd	r15, Y+5	; 0x05
    2422:	0c 81       	ldd	r16, Y+4	; 0x04
    2424:	1b 81       	ldd	r17, Y+3	; 0x03
    2426:	aa 81       	ldd	r26, Y+2	; 0x02
    2428:	b9 81       	ldd	r27, Y+1	; 0x01
    242a:	ce 0f       	add	r28, r30
    242c:	d1 1d       	adc	r29, r1
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	ed 01       	movw	r28, r26
    243a:	08 95       	ret

0000243c <_exit>:
    243c:	f8 94       	cli

0000243e <__stop_program>:
    243e:	ff cf       	rjmp	.-2      	; 0x243e <__stop_program>
